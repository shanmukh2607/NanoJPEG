
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `synth.ys' --

1. Executing Verilog-2005 frontend: col_idct.v
Parsing Verilog input from `col_idct.v' to AST representation.
Generating RTLIL representation for module `\col_idct'.
Successfully finished Verilog frontend.

2. Executing SYNTH_XILINX pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/xilinx/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/xilinx/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\VCC'.
Generating RTLIL representation for module `\GND'.
Generating RTLIL representation for module `\IBUF'.
Generating RTLIL representation for module `\OBUF'.
Generating RTLIL representation for module `\BUFG'.
Generating RTLIL representation for module `\BUFGCTRL'.
Generating RTLIL representation for module `\BUFHCE'.
Generating RTLIL representation for module `\INV'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\LUT5'.
Generating RTLIL representation for module `\LUT6'.
Generating RTLIL representation for module `\LUT6_2'.
Generating RTLIL representation for module `\MUXCY'.
Generating RTLIL representation for module `\MUXF7'.
Generating RTLIL representation for module `\MUXF8'.
Generating RTLIL representation for module `\XORCY'.
Generating RTLIL representation for module `\CARRY4'.
Generating RTLIL representation for module `\FDRE'.
Generating RTLIL representation for module `\FDSE'.
Generating RTLIL representation for module `\FDCE'.
Generating RTLIL representation for module `\FDPE'.
Generating RTLIL representation for module `\FDRE_1'.
Generating RTLIL representation for module `\FDSE_1'.
Generating RTLIL representation for module `\FDCE_1'.
Generating RTLIL representation for module `\FDPE_1'.
Generating RTLIL representation for module `\RAM32X1D'.
Generating RTLIL representation for module `\RAM64X1D'.
Generating RTLIL representation for module `\RAM128X1D'.
Generating RTLIL representation for module `\SRL16E'.
Generating RTLIL representation for module `\SRLC32E'.
Successfully finished Verilog frontend.

2.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/xilinx/cells_xtra.v
Parsing Verilog input from `/usr/bin/../share/yosys/xilinx/cells_xtra.v' to AST representation.
Generating RTLIL representation for module `\BSCANE2'.
Generating RTLIL representation for module `\BUFGCE'.
Generating RTLIL representation for module `\BUFGCE_1'.
Generating RTLIL representation for module `\BUFGMUX'.
Generating RTLIL representation for module `\BUFGMUX_1'.
Generating RTLIL representation for module `\BUFGMUX_CTRL'.
Generating RTLIL representation for module `\BUFH'.
Generating RTLIL representation for module `\BUFIO'.
Generating RTLIL representation for module `\BUFMR'.
Generating RTLIL representation for module `\BUFMRCE'.
Generating RTLIL representation for module `\BUFR'.
Generating RTLIL representation for module `\CAPTUREE2'.
Generating RTLIL representation for module `\CFGLUT5'.
Generating RTLIL representation for module `\DCIRESET'.
Generating RTLIL representation for module `\DNA_PORT'.
Generating RTLIL representation for module `\DSP48E1'.
Generating RTLIL representation for module `\EFUSE_USR'.
Generating RTLIL representation for module `\FIFO18E1'.
Generating RTLIL representation for module `\FIFO36E1'.
Generating RTLIL representation for module `\FRAME_ECCE2'.
Generating RTLIL representation for module `\GTHE2_CHANNEL'.
Generating RTLIL representation for module `\GTHE2_COMMON'.
Generating RTLIL representation for module `\GTPE2_CHANNEL'.
Generating RTLIL representation for module `\GTPE2_COMMON'.
Generating RTLIL representation for module `\GTXE2_CHANNEL'.
Generating RTLIL representation for module `\GTXE2_COMMON'.
Generating RTLIL representation for module `\IBUF_IBUFDISABLE'.
Generating RTLIL representation for module `\IBUF_INTERMDISABLE'.
Generating RTLIL representation for module `\IBUFDS'.
Generating RTLIL representation for module `\IBUFDS_DIFF_OUT'.
Generating RTLIL representation for module `\IBUFDS_DIFF_OUT_IBUFDISABLE'.
Generating RTLIL representation for module `\IBUFDS_DIFF_OUT_INTERMDISABLE'.
Generating RTLIL representation for module `\IBUFDS_GTE2'.
Generating RTLIL representation for module `\IBUFDS_IBUFDISABLE'.
Generating RTLIL representation for module `\IBUFDS_INTERMDISABLE'.
Generating RTLIL representation for module `\ICAPE2'.
Generating RTLIL representation for module `\IDDR'.
Generating RTLIL representation for module `\IDDR_2CLK'.
Generating RTLIL representation for module `\IDELAYCTRL'.
Generating RTLIL representation for module `\IDELAYE2'.
Generating RTLIL representation for module `\IN_FIFO'.
Generating RTLIL representation for module `\IOBUF'.
Generating RTLIL representation for module `\IOBUF_DCIEN'.
Generating RTLIL representation for module `\IOBUF_INTERMDISABLE'.
Generating RTLIL representation for module `\IOBUFDS'.
Generating RTLIL representation for module `\IOBUFDS_DCIEN'.
Generating RTLIL representation for module `\IOBUFDS_DIFF_OUT'.
Generating RTLIL representation for module `\IOBUFDS_DIFF_OUT_DCIEN'.
Generating RTLIL representation for module `\IOBUFDS_DIFF_OUT_INTERMDISABLE'.
Generating RTLIL representation for module `\ISERDESE2'.
Generating RTLIL representation for module `\KEEPER'.
Generating RTLIL representation for module `\LDCE'.
Generating RTLIL representation for module `\LDPE'.
Generating RTLIL representation for module `\MMCME2_ADV'.
Generating RTLIL representation for module `\MMCME2_BASE'.
Generating RTLIL representation for module `\OBUFDS'.
Generating RTLIL representation for module `\OBUFT'.
Generating RTLIL representation for module `\OBUFTDS'.
Generating RTLIL representation for module `\ODDR'.
Generating RTLIL representation for module `\ODELAYE2'.
Generating RTLIL representation for module `\OSERDESE2'.
Generating RTLIL representation for module `\OUT_FIFO'.
Generating RTLIL representation for module `\PHASER_IN'.
Generating RTLIL representation for module `\PHASER_IN_PHY'.
Generating RTLIL representation for module `\PHASER_OUT'.
Generating RTLIL representation for module `\PHASER_OUT_PHY'.
Generating RTLIL representation for module `\PHASER_REF'.
Generating RTLIL representation for module `\PHY_CONTROL'.
Generating RTLIL representation for module `\PLLE2_ADV'.
Generating RTLIL representation for module `\PLLE2_BASE'.
Generating RTLIL representation for module `\PS7'.
Generating RTLIL representation for module `\PULLDOWN'.
Generating RTLIL representation for module `\PULLUP'.
Generating RTLIL representation for module `\RAM128X1S'.
Generating RTLIL representation for module `\RAM256X1S'.
Generating RTLIL representation for module `\RAM32M'.
Generating RTLIL representation for module `\RAM32X1S'.
Generating RTLIL representation for module `\RAM32X1S_1'.
Generating RTLIL representation for module `\RAM32X2S'.
Generating RTLIL representation for module `\RAM64M'.
Replacing existing blackbox module `\RAM64X1D' at /usr/bin/../share/yosys/xilinx/cells_xtra.v:3741.
Generating RTLIL representation for module `\RAM64X1D'.
Generating RTLIL representation for module `\RAM64X1S'.
Generating RTLIL representation for module `\RAM64X1S_1'.
Generating RTLIL representation for module `\RAM64X2S'.
Generating RTLIL representation for module `\ROM128X1'.
Generating RTLIL representation for module `\ROM256X1'.
Generating RTLIL representation for module `\ROM32X1'.
Generating RTLIL representation for module `\ROM64X1'.
Generating RTLIL representation for module `\STARTUPE2'.
Generating RTLIL representation for module `\USR_ACCESSE2'.
Generating RTLIL representation for module `\XADC'.
Successfully finished Verilog frontend.

2.3. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/xilinx/brams_bb.v
Parsing Verilog input from `/usr/bin/../share/yosys/xilinx/brams_bb.v' to AST representation.
Generating RTLIL representation for module `\RAMB18E1'.
Generating RTLIL representation for module `\RAMB36E1'.
Successfully finished Verilog frontend.

2.4. Executing HIERARCHY pass (managing design hierarchy).

2.4.1. Analyzing design hierarchy..
Top module:  \col_idct

2.4.2. Analyzing design hierarchy..
Top module:  \col_idct
Removed 0 unused modules.

2.5. Executing SYNTH pass.

2.5.1. Executing PROC pass (convert processes to netlists).

2.5.1.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.5.1.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 4 switch rules as full_case in process $proc$col_idct.v:112$1 in module col_idct.
Removed a total of 0 dead cases.

2.5.1.3. Executing PROC_INIT pass (extract init attributes).

2.5.1.4. Executing PROC_ARST pass (detect async resets in processes).

2.5.1.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\col_idct.$proc$col_idct.v:112$1'.
     1/10: $0\y0[31:0]
     2/10: $0\rdy[0:0]
     3/10: $0\ctr[9:0]
     4/10: $0\y2[31:0]
     5/10: $0\y1[31:0]
     6/10: $0\y7[31:0]
     7/10: $0\y6[31:0]
     8/10: $0\y5[31:0]
     9/10: $0\y4[31:0]
    10/10: $0\y3[31:0]

2.5.1.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.5.1.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\col_idct.\y0' using process `\col_idct.$proc$col_idct.v:112$1'.
  created $dff cell `$procdff$271' with positive edge clock.
Creating register for signal `\col_idct.\y1' using process `\col_idct.$proc$col_idct.v:112$1'.
  created $dff cell `$procdff$272' with positive edge clock.
Creating register for signal `\col_idct.\y2' using process `\col_idct.$proc$col_idct.v:112$1'.
  created $dff cell `$procdff$273' with positive edge clock.
Creating register for signal `\col_idct.\y3' using process `\col_idct.$proc$col_idct.v:112$1'.
  created $dff cell `$procdff$274' with positive edge clock.
Creating register for signal `\col_idct.\y4' using process `\col_idct.$proc$col_idct.v:112$1'.
  created $dff cell `$procdff$275' with positive edge clock.
Creating register for signal `\col_idct.\y5' using process `\col_idct.$proc$col_idct.v:112$1'.
  created $dff cell `$procdff$276' with positive edge clock.
Creating register for signal `\col_idct.\y6' using process `\col_idct.$proc$col_idct.v:112$1'.
  created $dff cell `$procdff$277' with positive edge clock.
Creating register for signal `\col_idct.\y7' using process `\col_idct.$proc$col_idct.v:112$1'.
  created $dff cell `$procdff$278' with positive edge clock.
Creating register for signal `\col_idct.\rdy' using process `\col_idct.$proc$col_idct.v:112$1'.
  created $dff cell `$procdff$279' with positive edge clock.
Creating register for signal `\col_idct.\ctr' using process `\col_idct.$proc$col_idct.v:112$1'.
  created $dff cell `$procdff$280' with positive edge clock.

2.5.1.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\col_idct.$proc$col_idct.v:112$1'.
Removing empty process `col_idct.$proc$col_idct.v:112$1'.
Cleaned up 4 empty switches.

2.5.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module col_idct.
<suppressed ~74 debug messages>

2.5.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \col_idct..
Removed 0 unused cells and 146 unused wires.
<suppressed ~1 debug messages>

2.5.4. Executing CHECK pass (checking for obvious problems).
checking module col_idct..
found and reported 0 problems.

2.5.5. Executing OPT pass (performing simple optimizations).

2.5.5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module col_idct.

2.5.5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\col_idct'.
Removed a total of 0 cells.

2.5.5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \col_idct..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $ternary$col_idct.v:200$185: \p0 -> { 1'0 \p0 [30:0] }
      Replacing known input bits on port A of cell $ternary$col_idct.v:202$191: \p2 -> { 1'0 \p2 [30:0] }
      Replacing known input bits on port A of cell $ternary$col_idct.v:201$188: \p1 -> { 1'0 \p1 [30:0] }
      Replacing known input bits on port A of cell $ternary$col_idct.v:207$206: \p7 -> { 1'0 \p7 [30:0] }
      Replacing known input bits on port A of cell $ternary$col_idct.v:206$203: \p6 -> { 1'0 \p6 [30:0] }
      Replacing known input bits on port A of cell $ternary$col_idct.v:205$200: \p5 -> { 1'0 \p5 [30:0] }
      Replacing known input bits on port A of cell $ternary$col_idct.v:204$197: \p4 -> { 1'0 \p4 [30:0] }
      Replacing known input bits on port A of cell $ternary$col_idct.v:203$194: \p3 -> { 1'0 \p3 [30:0] }
      Replacing known input bits on port A of cell $ternary$col_idct.v:151$20: \alt_out -> { 1'0 \alt_out [30:0] }
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.5.5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \col_idct.
    New input vector for $reduce_or cell $reduce_or$col_idct.v:207$205: { \p7 [8] \p7 [9] \p7 [10] \p7 [11] \p7 [12] \p7 [13] \p7 [14] \p7 [15] \p7 [16] \p7 [17] \p7 [18] \p7 [19] \p7 [20] \p7 [21] \p7 [22] \p7 [23] \p7 [24] \p7 [25] \p7 [26] \p7 [27] \p7 [28] \p7 [29] \p7 [30] }
    New input vector for $reduce_or cell $reduce_or$col_idct.v:206$202: { \p6 [8] \p6 [9] \p6 [10] \p6 [11] \p6 [12] \p6 [13] \p6 [14] \p6 [15] \p6 [16] \p6 [17] \p6 [18] \p6 [19] \p6 [20] \p6 [21] \p6 [22] \p6 [23] \p6 [24] \p6 [25] \p6 [26] \p6 [27] \p6 [28] \p6 [29] \p6 [30] }
    New input vector for $reduce_or cell $reduce_or$col_idct.v:205$199: { \p5 [8] \p5 [9] \p5 [10] \p5 [11] \p5 [12] \p5 [13] \p5 [14] \p5 [15] \p5 [16] \p5 [17] \p5 [18] \p5 [19] \p5 [20] \p5 [21] \p5 [22] \p5 [23] \p5 [24] \p5 [25] \p5 [26] \p5 [27] \p5 [28] \p5 [29] \p5 [30] }
    New input vector for $reduce_or cell $reduce_or$col_idct.v:204$196: { \p4 [8] \p4 [9] \p4 [10] \p4 [11] \p4 [12] \p4 [13] \p4 [14] \p4 [15] \p4 [16] \p4 [17] \p4 [18] \p4 [19] \p4 [20] \p4 [21] \p4 [22] \p4 [23] \p4 [24] \p4 [25] \p4 [26] \p4 [27] \p4 [28] \p4 [29] \p4 [30] }
    New input vector for $reduce_or cell $reduce_or$col_idct.v:203$193: { \p3 [8] \p3 [9] \p3 [10] \p3 [11] \p3 [12] \p3 [13] \p3 [14] \p3 [15] \p3 [16] \p3 [17] \p3 [18] \p3 [19] \p3 [20] \p3 [21] \p3 [22] \p3 [23] \p3 [24] \p3 [25] \p3 [26] \p3 [27] \p3 [28] \p3 [29] \p3 [30] }
    New input vector for $reduce_or cell $reduce_or$col_idct.v:202$190: { \p2 [8] \p2 [9] \p2 [10] \p2 [11] \p2 [12] \p2 [13] \p2 [14] \p2 [15] \p2 [16] \p2 [17] \p2 [18] \p2 [19] \p2 [20] \p2 [21] \p2 [22] \p2 [23] \p2 [24] \p2 [25] \p2 [26] \p2 [27] \p2 [28] \p2 [29] \p2 [30] }
    New input vector for $reduce_or cell $reduce_or$col_idct.v:201$187: { \p1 [8] \p1 [9] \p1 [10] \p1 [11] \p1 [12] \p1 [13] \p1 [14] \p1 [15] \p1 [16] \p1 [17] \p1 [18] \p1 [19] \p1 [20] \p1 [21] \p1 [22] \p1 [23] \p1 [24] \p1 [25] \p1 [26] \p1 [27] \p1 [28] \p1 [29] \p1 [30] }
    New input vector for $reduce_or cell $reduce_or$col_idct.v:200$184: { \p0 [8] \p0 [9] \p0 [10] \p0 [11] \p0 [12] \p0 [13] \p0 [14] \p0 [15] \p0 [16] \p0 [17] \p0 [18] \p0 [19] \p0 [20] \p0 [21] \p0 [22] \p0 [23] \p0 [24] \p0 [25] \p0 [26] \p0 [27] \p0 [28] \p0 [29] \p0 [30] }
    New input vector for $reduce_or cell $reduce_or$col_idct.v:151$19: { \alt_out [8] \alt_out [9] \alt_out [10] \alt_out [11] \alt_out [12] \alt_out [13] \alt_out [14] \alt_out [15] \alt_out [16] \alt_out [17] \alt_out [18] \alt_out [19] \alt_out [20] \alt_out [21] \alt_out [22] \alt_out [23] \alt_out [24] \alt_out [25] \alt_out [26] \alt_out [27] \alt_out [28] \alt_out [29] \alt_out [30] }
  Optimizing cells in module \col_idct.
Performed a total of 9 changes.

2.5.5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\col_idct'.
Removed a total of 0 cells.

2.5.5.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.5.5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \col_idct..

2.5.5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module col_idct.

2.5.5.9. Rerunning OPT passes. (Maybe there is more to do..)

2.5.5.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \col_idct..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.5.5.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \col_idct.
Performed a total of 0 changes.

2.5.5.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\col_idct'.
Removed a total of 0 cells.

2.5.5.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.5.5.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \col_idct..

2.5.5.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module col_idct.

2.5.5.16. Finished OPT passes. (There is nothing left to do.)

2.5.6. Executing WREDUCE pass (reducing word size of cells).
Removed top 9 bits (of 10) from port B of cell col_idct.$add$col_idct.v:119$3 ($add).
Removed top 30 bits (of 32) from port B of cell col_idct.$lt$col_idct.v:122$11 ($lt).
Removed top 27 bits (of 32) from port B of cell col_idct.$lt$col_idct.v:131$12 ($lt).
Removed top 17 bits (of 32) from port B of cell col_idct.$add$col_idct.v:141$14 ($add).
Removed top 25 bits (of 32) from port B of cell col_idct.$add$col_idct.v:150$16 ($add).
Removed top 6 bits (of 32) from port A of cell col_idct.$add$col_idct.v:150$18 ($add).
Removed top 23 bits (of 32) from port B of cell col_idct.$add$col_idct.v:150$18 ($add).
Removed top 5 bits (of 32) from port Y of cell col_idct.$add$col_idct.v:150$18 ($add).
Removed top 1 bits (of 32) from mux cell col_idct.$ternary$col_idct.v:151$20 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$ternary$col_idct.v:151$21 ($mux).
Removed top 28 bits (of 32) from port B of cell col_idct.$add$col_idct.v:154$31 ($add).
Removed top 3 bits (of 32) from port Y of cell col_idct.$add$col_idct.v:157$54 ($add).
Removed top 3 bits (of 32) from port A of cell col_idct.$add$col_idct.v:157$54 ($add).
Removed top 3 bits (of 32) from port B of cell col_idct.$add$col_idct.v:157$54 ($add).
Removed top 28 bits (of 32) from port B of cell col_idct.$add$col_idct.v:158$64 ($add).
Removed top 28 bits (of 32) from port B of cell col_idct.$add$col_idct.v:162$99 ($add).
Removed top 2 bits (of 32) from port Y of cell col_idct.$add$col_idct.v:161$91 ($add).
Removed top 2 bits (of 32) from port A of cell col_idct.$add$col_idct.v:161$91 ($add).
Removed top 2 bits (of 32) from port B of cell col_idct.$add$col_idct.v:161$91 ($add).
Removed top 3 bits (of 32) from port A of cell col_idct.$add$col_idct.v:175$130 ($add).
Removed top 3 bits (of 32) from port B of cell col_idct.$add$col_idct.v:175$130 ($add).
Removed top 2 bits (of 32) from port Y of cell col_idct.$add$col_idct.v:175$130 ($add).
Removed top 3 bits (of 32) from port B of cell col_idct.$add$col_idct.v:176$131 ($add).
Removed top 3 bits (of 32) from port A of cell col_idct.$sub$col_idct.v:177$132 ($sub).
Removed top 3 bits (of 32) from port B of cell col_idct.$sub$col_idct.v:177$132 ($sub).
Removed top 3 bits (of 32) from port A of cell col_idct.$sub$col_idct.v:178$133 ($sub).
Removed top 3 bits (of 32) from port B of cell col_idct.$sub$col_idct.v:178$133 ($sub).
Removed top 3 bits (of 32) from port A of cell col_idct.$add$col_idct.v:179$134 ($add).
Removed top 3 bits (of 32) from port B of cell col_idct.$add$col_idct.v:179$134 ($add).
Removed top 2 bits (of 32) from port Y of cell col_idct.$add$col_idct.v:179$134 ($add).
Removed top 3 bits (of 32) from port B of cell col_idct.$add$col_idct.v:180$135 ($add).
Removed top 23 bits (of 32) from port B of cell col_idct.$add$col_idct.v:184$155 ($add).
Removed top 23 bits (of 32) from port B of cell col_idct.$add$col_idct.v:182$145 ($add).
Removed top 3 bits (of 32) from port B of cell col_idct.$sub$col_idct.v:186$156 ($sub).
Removed top 3 bits (of 32) from port B of cell col_idct.$sub$col_idct.v:189$159 ($sub).
Removed top 2 bits (of 32) from port B of cell col_idct.$add$col_idct.v:191$160 ($add).
Removed top 14 bits (of 32) from port A of cell col_idct.$add$col_idct.v:191$162 ($add).
Removed top 23 bits (of 32) from port B of cell col_idct.$add$col_idct.v:191$162 ($add).
Removed top 13 bits (of 32) from port Y of cell col_idct.$add$col_idct.v:191$162 ($add).
Removed top 8 bits (of 32) from port B of cell col_idct.$add$col_idct.v:192$163 ($add).
Removed top 14 bits (of 32) from port A of cell col_idct.$add$col_idct.v:192$165 ($add).
Removed top 23 bits (of 32) from port B of cell col_idct.$add$col_idct.v:192$165 ($add).
Removed top 13 bits (of 32) from port Y of cell col_idct.$add$col_idct.v:192$165 ($add).
Removed top 8 bits (of 32) from port B of cell col_idct.$add$col_idct.v:193$166 ($add).
Removed top 14 bits (of 32) from port A of cell col_idct.$add$col_idct.v:193$168 ($add).
Removed top 23 bits (of 32) from port B of cell col_idct.$add$col_idct.v:193$168 ($add).
Removed top 13 bits (of 32) from port Y of cell col_idct.$add$col_idct.v:193$168 ($add).
Removed top 2 bits (of 32) from port B of cell col_idct.$add$col_idct.v:194$169 ($add).
Removed top 14 bits (of 32) from port A of cell col_idct.$add$col_idct.v:194$171 ($add).
Removed top 23 bits (of 32) from port B of cell col_idct.$add$col_idct.v:194$171 ($add).
Removed top 13 bits (of 32) from port Y of cell col_idct.$add$col_idct.v:194$171 ($add).
Removed top 2 bits (of 32) from port B of cell col_idct.$sub$col_idct.v:195$172 ($sub).
Removed top 14 bits (of 32) from port A of cell col_idct.$add$col_idct.v:195$174 ($add).
Removed top 23 bits (of 32) from port B of cell col_idct.$add$col_idct.v:195$174 ($add).
Removed top 13 bits (of 32) from port Y of cell col_idct.$add$col_idct.v:195$174 ($add).
Removed top 8 bits (of 32) from port B of cell col_idct.$sub$col_idct.v:196$175 ($sub).
Removed top 14 bits (of 32) from port A of cell col_idct.$add$col_idct.v:196$177 ($add).
Removed top 23 bits (of 32) from port B of cell col_idct.$add$col_idct.v:196$177 ($add).
Removed top 13 bits (of 32) from port Y of cell col_idct.$add$col_idct.v:196$177 ($add).
Removed top 8 bits (of 32) from port B of cell col_idct.$sub$col_idct.v:197$178 ($sub).
Removed top 14 bits (of 32) from port A of cell col_idct.$add$col_idct.v:197$180 ($add).
Removed top 23 bits (of 32) from port B of cell col_idct.$add$col_idct.v:197$180 ($add).
Removed top 13 bits (of 32) from port Y of cell col_idct.$add$col_idct.v:197$180 ($add).
Removed top 2 bits (of 32) from port B of cell col_idct.$sub$col_idct.v:198$181 ($sub).
Removed top 14 bits (of 32) from port A of cell col_idct.$add$col_idct.v:198$183 ($add).
Removed top 23 bits (of 32) from port B of cell col_idct.$add$col_idct.v:198$183 ($add).
Removed top 13 bits (of 32) from port Y of cell col_idct.$add$col_idct.v:198$183 ($add).
Removed top 1 bits (of 32) from mux cell col_idct.$ternary$col_idct.v:200$185 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$ternary$col_idct.v:200$186 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$ternary$col_idct.v:201$188 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$ternary$col_idct.v:201$189 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$ternary$col_idct.v:202$191 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$ternary$col_idct.v:203$194 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$ternary$col_idct.v:203$195 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$ternary$col_idct.v:204$197 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$ternary$col_idct.v:204$198 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$ternary$col_idct.v:205$200 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$ternary$col_idct.v:206$203 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$ternary$col_idct.v:206$204 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$ternary$col_idct.v:207$206 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$ternary$col_idct.v:207$207 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$procmux$209 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$procmux$212 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$procmux$242 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$procmux$236 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$procmux$239 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$procmux$245 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$procmux$248 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$procmux$251 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$procmux$266 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$procmux$260 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$procmux$263 ($mux).
Removed top 1 bits (of 32) from mux cell col_idct.$procmux$269 ($mux).
Removed top 1 bits (of 32) from FF cell col_idct.$procdff$271 ($dff).
Removed top 1 bits (of 32) from FF cell col_idct.$procdff$272 ($dff).
Removed top 1 bits (of 32) from FF cell col_idct.$procdff$274 ($dff).
Removed top 1 bits (of 32) from FF cell col_idct.$procdff$275 ($dff).
Removed top 1 bits (of 32) from FF cell col_idct.$procdff$277 ($dff).
Removed top 1 bits (of 32) from FF cell col_idct.$procdff$278 ($dff).
Removed top 1 bits (of 32) from wire col_idct.$0\y0[31:0].
Removed top 1 bits (of 32) from wire col_idct.$0\y1[31:0].
Removed top 1 bits (of 32) from wire col_idct.$0\y3[31:0].
Removed top 1 bits (of 32) from wire col_idct.$0\y4[31:0].
Removed top 1 bits (of 32) from wire col_idct.$0\y6[31:0].
Removed top 1 bits (of 32) from wire col_idct.$0\y7[31:0].
Removed top 9 bits (of 10) from wire col_idct.$logic_not$col_idct.v:119$2_Y.
Removed top 1 bits (of 32) from wire col_idct.$procmux$209_Y.
Removed top 1 bits (of 32) from wire col_idct.$procmux$236_Y.
Removed top 1 bits (of 32) from wire col_idct.$procmux$242_Y.
Removed top 1 bits (of 32) from wire col_idct.$procmux$248_Y.
Removed top 1 bits (of 32) from wire col_idct.$procmux$260_Y.
Removed top 1 bits (of 32) from wire col_idct.$procmux$266_Y.
Removed top 1 bits (of 32) from wire col_idct.$ternary$col_idct.v:151$20_Y.
Removed top 1 bits (of 32) from wire col_idct.$ternary$col_idct.v:200$185_Y.
Removed top 1 bits (of 32) from wire col_idct.$ternary$col_idct.v:201$188_Y.
Removed top 1 bits (of 32) from wire col_idct.$ternary$col_idct.v:202$191_Y.
Removed top 1 bits (of 32) from wire col_idct.$ternary$col_idct.v:206$203_Y.
Removed top 1 bits (of 32) from wire col_idct.alt_out_clipped.
Removed top 3 bits (of 32) from wire col_idct.t4.
Removed top 2 bits (of 32) from wire col_idct.t8.
Removed top 1 bits (of 32) from wire col_idct.yc0.
Removed top 1 bits (of 32) from wire col_idct.yc1.
Removed top 1 bits (of 32) from wire col_idct.yc6.

2.5.7. Executing PEEPOPT pass (run peephole optimizers).

2.5.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \col_idct..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

2.5.9. Executing TECHMAP pass (map to technology primitives).

2.5.9.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.5.9.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~36 debug messages>

2.5.10. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module col_idct:
  creating $macc model for $add$col_idct.v:119$3 ($add).
  creating $macc model for $add$col_idct.v:141$14 ($add).
  creating $macc model for $add$col_idct.v:150$16 ($add).
  creating $macc model for $add$col_idct.v:150$18 ($add).
  creating $macc model for $add$col_idct.v:153$22 ($add).
  creating $macc model for $add$col_idct.v:154$24 ($add).
  creating $macc model for $add$col_idct.v:154$26 ($add).
  creating $macc model for $add$col_idct.v:154$28 ($add).
  creating $macc model for $add$col_idct.v:154$30 ($add).
  creating $macc model for $add$col_idct.v:154$31 ($add).
  creating $macc model for $add$col_idct.v:155$34 ($add).
  creating $macc model for $add$col_idct.v:155$36 ($add).
  creating $macc model for $add$col_idct.v:155$38 ($add).
  creating $macc model for $add$col_idct.v:155$40 ($add).
  creating $macc model for $add$col_idct.v:156$43 ($add).
  creating $macc model for $add$col_idct.v:156$45 ($add).
  creating $macc model for $add$col_idct.v:156$47 ($add).
  creating $macc model for $add$col_idct.v:156$49 ($add).
  creating $macc model for $add$col_idct.v:156$51 ($add).
  creating $macc model for $add$col_idct.v:156$53 ($add).
  creating $macc model for $add$col_idct.v:157$54 ($add).
  creating $macc model for $add$col_idct.v:158$57 ($add).
  creating $macc model for $add$col_idct.v:158$59 ($add).
  creating $macc model for $add$col_idct.v:158$61 ($add).
  creating $macc model for $add$col_idct.v:158$63 ($add).
  creating $macc model for $add$col_idct.v:158$64 ($add).
  creating $macc model for $add$col_idct.v:159$66 ($add).
  creating $macc model for $add$col_idct.v:159$68 ($add).
  creating $macc model for $add$col_idct.v:159$70 ($add).
  creating $macc model for $add$col_idct.v:159$72 ($add).
  creating $macc model for $add$col_idct.v:159$74 ($add).
  creating $macc model for $add$col_idct.v:159$76 ($add).
  creating $macc model for $add$col_idct.v:160$78 ($add).
  creating $macc model for $add$col_idct.v:160$80 ($add).
  creating $macc model for $add$col_idct.v:160$82 ($add).
  creating $macc model for $add$col_idct.v:160$84 ($add).
  creating $macc model for $add$col_idct.v:160$86 ($add).
  creating $macc model for $add$col_idct.v:160$88 ($add).
  creating $macc model for $add$col_idct.v:160$90 ($add).
  creating $macc model for $add$col_idct.v:161$91 ($add).
  creating $macc model for $add$col_idct.v:162$94 ($add).
  creating $macc model for $add$col_idct.v:162$96 ($add).
  creating $macc model for $add$col_idct.v:162$98 ($add).
  creating $macc model for $add$col_idct.v:162$99 ($add).
  creating $macc model for $add$col_idct.v:163$102 ($add).
  creating $macc model for $add$col_idct.v:163$104 ($add).
  creating $macc model for $add$col_idct.v:163$106 ($add).
  creating $macc model for $add$col_idct.v:163$108 ($add).
  creating $macc model for $add$col_idct.v:163$110 ($add).
  creating $macc model for $add$col_idct.v:164$113 ($add).
  creating $macc model for $add$col_idct.v:164$115 ($add).
  creating $macc model for $add$col_idct.v:167$118 ($add).
  creating $macc model for $add$col_idct.v:168$120 ($add).
  creating $macc model for $add$col_idct.v:174$129 ($add).
  creating $macc model for $add$col_idct.v:175$130 ($add).
  creating $macc model for $add$col_idct.v:176$131 ($add).
  creating $macc model for $add$col_idct.v:179$134 ($add).
  creating $macc model for $add$col_idct.v:180$135 ($add).
  creating $macc model for $add$col_idct.v:181$136 ($add).
  creating $macc model for $add$col_idct.v:182$138 ($add).
  creating $macc model for $add$col_idct.v:182$140 ($add).
  creating $macc model for $add$col_idct.v:182$142 ($add).
  creating $macc model for $add$col_idct.v:182$144 ($add).
  creating $macc model for $add$col_idct.v:182$145 ($add).
  creating $macc model for $add$col_idct.v:184$148 ($add).
  creating $macc model for $add$col_idct.v:184$150 ($add).
  creating $macc model for $add$col_idct.v:184$152 ($add).
  creating $macc model for $add$col_idct.v:184$154 ($add).
  creating $macc model for $add$col_idct.v:184$155 ($add).
  creating $macc model for $add$col_idct.v:191$160 ($add).
  creating $macc model for $add$col_idct.v:191$162 ($add).
  creating $macc model for $add$col_idct.v:192$163 ($add).
  creating $macc model for $add$col_idct.v:192$165 ($add).
  creating $macc model for $add$col_idct.v:193$166 ($add).
  creating $macc model for $add$col_idct.v:193$168 ($add).
  creating $macc model for $add$col_idct.v:194$169 ($add).
  creating $macc model for $add$col_idct.v:194$171 ($add).
  creating $macc model for $add$col_idct.v:195$174 ($add).
  creating $macc model for $add$col_idct.v:196$177 ($add).
  creating $macc model for $add$col_idct.v:197$180 ($add).
  creating $macc model for $add$col_idct.v:198$183 ($add).
  creating $macc model for $sub$col_idct.v:166$116 ($sub).
  creating $macc model for $sub$col_idct.v:169$122 ($sub).
  creating $macc model for $sub$col_idct.v:170$124 ($sub).
  creating $macc model for $sub$col_idct.v:171$126 ($sub).
  creating $macc model for $sub$col_idct.v:173$128 ($sub).
  creating $macc model for $sub$col_idct.v:177$132 ($sub).
  creating $macc model for $sub$col_idct.v:178$133 ($sub).
  creating $macc model for $sub$col_idct.v:183$146 ($sub).
  creating $macc model for $sub$col_idct.v:186$156 ($sub).
  creating $macc model for $sub$col_idct.v:189$159 ($sub).
  creating $macc model for $sub$col_idct.v:195$172 ($sub).
  creating $macc model for $sub$col_idct.v:196$175 ($sub).
  creating $macc model for $sub$col_idct.v:197$178 ($sub).
  creating $macc model for $sub$col_idct.v:198$181 ($sub).
  merging $macc model for $add$col_idct.v:160$90 into $sub$col_idct.v:171$126.
  merging $macc model for $add$col_idct.v:160$88 into $sub$col_idct.v:171$126.
  merging $macc model for $add$col_idct.v:160$86 into $sub$col_idct.v:171$126.
  merging $macc model for $add$col_idct.v:160$84 into $sub$col_idct.v:171$126.
  merging $macc model for $add$col_idct.v:160$82 into $sub$col_idct.v:171$126.
  merging $macc model for $add$col_idct.v:160$80 into $sub$col_idct.v:171$126.
  merging $macc model for $add$col_idct.v:160$78 into $sub$col_idct.v:171$126.
  merging $macc model for $add$col_idct.v:159$76 into $sub$col_idct.v:170$124.
  merging $macc model for $add$col_idct.v:159$74 into $sub$col_idct.v:170$124.
  merging $macc model for $add$col_idct.v:159$72 into $sub$col_idct.v:170$124.
  merging $macc model for $add$col_idct.v:159$70 into $sub$col_idct.v:170$124.
  merging $macc model for $add$col_idct.v:159$68 into $sub$col_idct.v:170$124.
  merging $macc model for $add$col_idct.v:159$66 into $sub$col_idct.v:170$124.
  merging $macc model for $add$col_idct.v:156$53 into $sub$col_idct.v:169$122.
  merging $macc model for $add$col_idct.v:156$51 into $sub$col_idct.v:169$122.
  merging $macc model for $add$col_idct.v:156$49 into $sub$col_idct.v:169$122.
  merging $macc model for $add$col_idct.v:156$47 into $sub$col_idct.v:169$122.
  merging $macc model for $add$col_idct.v:156$45 into $sub$col_idct.v:169$122.
  merging $macc model for $add$col_idct.v:156$43 into $sub$col_idct.v:169$122.
  merging $macc model for $add$col_idct.v:163$110 into $sub$col_idct.v:166$116.
  merging $macc model for $add$col_idct.v:163$108 into $sub$col_idct.v:166$116.
  merging $macc model for $add$col_idct.v:163$106 into $sub$col_idct.v:166$116.
  merging $macc model for $add$col_idct.v:163$104 into $sub$col_idct.v:166$116.
  merging $macc model for $add$col_idct.v:163$102 into $sub$col_idct.v:166$116.
  merging $macc model for $add$col_idct.v:184$154 into $add$col_idct.v:184$155.
  merging $macc model for $add$col_idct.v:184$152 into $add$col_idct.v:184$155.
  merging $macc model for $add$col_idct.v:184$150 into $add$col_idct.v:184$155.
  merging $macc model for $add$col_idct.v:184$148 into $add$col_idct.v:184$155.
  merging $macc model for $add$col_idct.v:182$144 into $add$col_idct.v:182$145.
  merging $macc model for $add$col_idct.v:182$142 into $add$col_idct.v:182$145.
  merging $macc model for $add$col_idct.v:182$140 into $add$col_idct.v:182$145.
  merging $macc model for $add$col_idct.v:182$138 into $add$col_idct.v:182$145.
  merging $macc model for $add$col_idct.v:155$40 into $add$col_idct.v:168$120.
  merging $macc model for $add$col_idct.v:155$38 into $add$col_idct.v:168$120.
  merging $macc model for $add$col_idct.v:155$36 into $add$col_idct.v:168$120.
  merging $macc model for $add$col_idct.v:155$34 into $add$col_idct.v:168$120.
  merging $macc model for $add$col_idct.v:164$115 into $add$col_idct.v:167$118.
  merging $macc model for $add$col_idct.v:164$113 into $add$col_idct.v:167$118.
  merging $macc model for $add$col_idct.v:162$98 into $add$col_idct.v:162$99.
  merging $macc model for $add$col_idct.v:162$96 into $add$col_idct.v:162$99.
  merging $macc model for $add$col_idct.v:162$94 into $add$col_idct.v:162$99.
  merging $macc model for $add$col_idct.v:158$63 into $add$col_idct.v:158$64.
  merging $macc model for $add$col_idct.v:158$61 into $add$col_idct.v:158$64.
  merging $macc model for $add$col_idct.v:158$59 into $add$col_idct.v:158$64.
  merging $macc model for $add$col_idct.v:158$57 into $add$col_idct.v:158$64.
  merging $macc model for $add$col_idct.v:154$30 into $add$col_idct.v:154$31.
  merging $macc model for $add$col_idct.v:154$28 into $add$col_idct.v:154$31.
  merging $macc model for $add$col_idct.v:154$26 into $add$col_idct.v:154$31.
  merging $macc model for $add$col_idct.v:154$24 into $add$col_idct.v:154$31.
  creating $alu model for $macc $add$col_idct.v:191$160.
  creating $alu model for $macc $sub$col_idct.v:173$128.
  creating $alu model for $macc $sub$col_idct.v:177$132.
  creating $alu model for $macc $add$col_idct.v:161$91.
  creating $alu model for $macc $add$col_idct.v:191$162.
  creating $alu model for $macc $add$col_idct.v:192$163.
  creating $alu model for $macc $add$col_idct.v:192$165.
  creating $alu model for $macc $add$col_idct.v:174$129.
  creating $alu model for $macc $add$col_idct.v:175$130.
  creating $alu model for $macc $add$col_idct.v:176$131.
  creating $alu model for $macc $add$col_idct.v:179$134.
  creating $alu model for $macc $add$col_idct.v:180$135.
  creating $alu model for $macc $add$col_idct.v:181$136.
  creating $alu model for $macc $sub$col_idct.v:178$133.
  creating $alu model for $macc $sub$col_idct.v:183$146.
  creating $alu model for $macc $sub$col_idct.v:186$156.
  creating $alu model for $macc $sub$col_idct.v:189$159.
  creating $alu model for $macc $add$col_idct.v:157$54.
  creating $alu model for $macc $add$col_idct.v:195$174.
  creating $alu model for $macc $add$col_idct.v:194$171.
  creating $alu model for $macc $add$col_idct.v:194$169.
  creating $alu model for $macc $add$col_idct.v:193$168.
  creating $alu model for $macc $add$col_idct.v:193$166.
  creating $alu model for $macc $add$col_idct.v:196$177.
  creating $alu model for $macc $add$col_idct.v:197$180.
  creating $alu model for $macc $add$col_idct.v:198$183.
  creating $alu model for $macc $sub$col_idct.v:195$172.
  creating $alu model for $macc $sub$col_idct.v:196$175.
  creating $alu model for $macc $sub$col_idct.v:197$178.
  creating $alu model for $macc $sub$col_idct.v:198$181.
  creating $alu model for $macc $add$col_idct.v:153$22.
  creating $alu model for $macc $add$col_idct.v:150$18.
  creating $alu model for $macc $add$col_idct.v:150$16.
  creating $alu model for $macc $add$col_idct.v:141$14.
  creating $alu model for $macc $add$col_idct.v:119$3.
  creating $macc cell for $sub$col_idct.v:166$116: $auto$alumacc.cc:354:replace_macc$305
  creating $macc cell for $add$col_idct.v:154$31: $auto$alumacc.cc:354:replace_macc$306
  creating $macc cell for $add$col_idct.v:168$120: $auto$alumacc.cc:354:replace_macc$307
  creating $macc cell for $add$col_idct.v:182$145: $auto$alumacc.cc:354:replace_macc$308
  creating $macc cell for $add$col_idct.v:167$118: $auto$alumacc.cc:354:replace_macc$309
  creating $macc cell for $sub$col_idct.v:169$122: $auto$alumacc.cc:354:replace_macc$310
  creating $macc cell for $sub$col_idct.v:170$124: $auto$alumacc.cc:354:replace_macc$311
  creating $macc cell for $sub$col_idct.v:171$126: $auto$alumacc.cc:354:replace_macc$312
  creating $macc cell for $add$col_idct.v:162$99: $auto$alumacc.cc:354:replace_macc$313
  creating $macc cell for $add$col_idct.v:158$64: $auto$alumacc.cc:354:replace_macc$314
  creating $macc cell for $add$col_idct.v:184$155: $auto$alumacc.cc:354:replace_macc$315
  creating $alu model for $lt$col_idct.v:122$11 ($lt): new $alu
  creating $alu model for $lt$col_idct.v:131$12 ($lt): new $alu
  creating $alu cell for $lt$col_idct.v:131$12: $auto$alumacc.cc:474:replace_alu$318
  creating $alu cell for $lt$col_idct.v:122$11: $auto$alumacc.cc:474:replace_alu$329
  creating $alu cell for $add$col_idct.v:119$3: $auto$alumacc.cc:474:replace_alu$340
  creating $alu cell for $add$col_idct.v:141$14: $auto$alumacc.cc:474:replace_alu$343
  creating $alu cell for $add$col_idct.v:150$16: $auto$alumacc.cc:474:replace_alu$346
  creating $alu cell for $add$col_idct.v:150$18: $auto$alumacc.cc:474:replace_alu$349
  creating $alu cell for $add$col_idct.v:153$22: $auto$alumacc.cc:474:replace_alu$352
  creating $alu cell for $sub$col_idct.v:198$181: $auto$alumacc.cc:474:replace_alu$355
  creating $alu cell for $sub$col_idct.v:197$178: $auto$alumacc.cc:474:replace_alu$358
  creating $alu cell for $sub$col_idct.v:196$175: $auto$alumacc.cc:474:replace_alu$361
  creating $alu cell for $sub$col_idct.v:195$172: $auto$alumacc.cc:474:replace_alu$364
  creating $alu cell for $add$col_idct.v:198$183: $auto$alumacc.cc:474:replace_alu$367
  creating $alu cell for $add$col_idct.v:197$180: $auto$alumacc.cc:474:replace_alu$370
  creating $alu cell for $add$col_idct.v:196$177: $auto$alumacc.cc:474:replace_alu$373
  creating $alu cell for $add$col_idct.v:193$166: $auto$alumacc.cc:474:replace_alu$376
  creating $alu cell for $add$col_idct.v:193$168: $auto$alumacc.cc:474:replace_alu$379
  creating $alu cell for $add$col_idct.v:194$169: $auto$alumacc.cc:474:replace_alu$382
  creating $alu cell for $add$col_idct.v:194$171: $auto$alumacc.cc:474:replace_alu$385
  creating $alu cell for $add$col_idct.v:195$174: $auto$alumacc.cc:474:replace_alu$388
  creating $alu cell for $add$col_idct.v:157$54: $auto$alumacc.cc:474:replace_alu$391
  creating $alu cell for $sub$col_idct.v:189$159: $auto$alumacc.cc:474:replace_alu$394
  creating $alu cell for $sub$col_idct.v:186$156: $auto$alumacc.cc:474:replace_alu$397
  creating $alu cell for $sub$col_idct.v:183$146: $auto$alumacc.cc:474:replace_alu$400
  creating $alu cell for $add$col_idct.v:181$136: $auto$alumacc.cc:474:replace_alu$403
  creating $alu cell for $add$col_idct.v:180$135: $auto$alumacc.cc:474:replace_alu$406
  creating $alu cell for $sub$col_idct.v:178$133: $auto$alumacc.cc:474:replace_alu$409
  creating $alu cell for $add$col_idct.v:179$134: $auto$alumacc.cc:474:replace_alu$412
  creating $alu cell for $add$col_idct.v:176$131: $auto$alumacc.cc:474:replace_alu$415
  creating $alu cell for $add$col_idct.v:175$130: $auto$alumacc.cc:474:replace_alu$418
  creating $alu cell for $add$col_idct.v:192$165: $auto$alumacc.cc:474:replace_alu$421
  creating $alu cell for $add$col_idct.v:192$163: $auto$alumacc.cc:474:replace_alu$424
  creating $alu cell for $add$col_idct.v:191$162: $auto$alumacc.cc:474:replace_alu$427
  creating $alu cell for $add$col_idct.v:161$91: $auto$alumacc.cc:474:replace_alu$430
  creating $alu cell for $sub$col_idct.v:177$132: $auto$alumacc.cc:474:replace_alu$433
  creating $alu cell for $add$col_idct.v:174$129: $auto$alumacc.cc:474:replace_alu$436
  creating $alu cell for $sub$col_idct.v:173$128: $auto$alumacc.cc:474:replace_alu$439
  creating $alu cell for $add$col_idct.v:191$160: $auto$alumacc.cc:474:replace_alu$442
  created 37 $alu and 11 $macc cells.

2.5.11. Executing SHARE pass (SAT-based resource sharing).

2.5.12. Executing OPT pass (performing simple optimizations).

2.5.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module col_idct.
<suppressed ~2 debug messages>

2.5.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\col_idct'.
Removed a total of 0 cells.

2.5.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \col_idct..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $ternary$col_idct.v:200$185: { \p0 [31] \p0 [31] \p0 [31] \p0 [31] \p0 [31] \p0 [31] \p0 [31] \p0 [31] \p0 [31] \p0 [31] \p0 [31] \p0 [31] \p0 [31] \p0 [17:0] } -> { 13'0000000000000 \p0 [17:0] }
      Replacing known input bits on port A of cell $ternary$col_idct.v:202$191: { \p2 [31] \p2 [31] \p2 [31] \p2 [31] \p2 [31] \p2 [31] \p2 [31] \p2 [31] \p2 [31] \p2 [31] \p2 [31] \p2 [31] \p2 [31] \p2 [17:0] } -> { 13'0000000000000 \p2 [17:0] }
      Replacing known input bits on port A of cell $ternary$col_idct.v:201$188: { \p1 [31] \p1 [31] \p1 [31] \p1 [31] \p1 [31] \p1 [31] \p1 [31] \p1 [31] \p1 [31] \p1 [31] \p1 [31] \p1 [31] \p1 [31] \p1 [17:0] } -> { 13'0000000000000 \p1 [17:0] }
      Replacing known input bits on port A of cell $ternary$col_idct.v:207$206: { \p7 [31] \p7 [31] \p7 [31] \p7 [31] \p7 [31] \p7 [31] \p7 [31] \p7 [31] \p7 [31] \p7 [31] \p7 [31] \p7 [31] \p7 [31] \p7 [17:0] } -> { 13'0000000000000 \p7 [17:0] }
      Replacing known input bits on port A of cell $ternary$col_idct.v:206$203: { \p6 [31] \p6 [31] \p6 [31] \p6 [31] \p6 [31] \p6 [31] \p6 [31] \p6 [31] \p6 [31] \p6 [31] \p6 [31] \p6 [31] \p6 [31] \p6 [17:0] } -> { 13'0000000000000 \p6 [17:0] }
      Replacing known input bits on port A of cell $ternary$col_idct.v:205$200: { \p5 [31] \p5 [31] \p5 [31] \p5 [31] \p5 [31] \p5 [31] \p5 [31] \p5 [31] \p5 [31] \p5 [31] \p5 [31] \p5 [31] \p5 [31] \p5 [17:0] } -> { 13'0000000000000 \p5 [17:0] }
      Replacing known input bits on port A of cell $ternary$col_idct.v:204$197: { \p4 [31] \p4 [31] \p4 [31] \p4 [31] \p4 [31] \p4 [31] \p4 [31] \p4 [31] \p4 [31] \p4 [31] \p4 [31] \p4 [31] \p4 [31] \p4 [17:0] } -> { 13'0000000000000 \p4 [17:0] }
      Replacing known input bits on port A of cell $ternary$col_idct.v:203$194: { \p3 [31] \p3 [31] \p3 [31] \p3 [31] \p3 [31] \p3 [31] \p3 [31] \p3 [31] \p3 [31] \p3 [31] \p3 [31] \p3 [31] \p3 [31] \p3 [17:0] } -> { 13'0000000000000 \p3 [17:0] }
      Replacing known input bits on port A of cell $ternary$col_idct.v:151$20: { \alt_out [31] \alt_out [31] \alt_out [31] \alt_out [31] \alt_out [31] \alt_out [25:0] } -> { 5'00000 \alt_out [25:0] }
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.5.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \col_idct.
    New input vector for $reduce_or cell $reduce_or$col_idct.v:207$205: { \p7 [8] \p7 [9] \p7 [10] \p7 [11] \p7 [12] \p7 [13] \p7 [14] \p7 [15] \p7 [16] \p7 [17] \p7 [31] }
    New input vector for $reduce_or cell $reduce_or$col_idct.v:206$202: { \p6 [8] \p6 [9] \p6 [10] \p6 [11] \p6 [12] \p6 [13] \p6 [14] \p6 [15] \p6 [16] \p6 [17] \p6 [31] }
    New input vector for $reduce_or cell $reduce_or$col_idct.v:205$199: { \p5 [8] \p5 [9] \p5 [10] \p5 [11] \p5 [12] \p5 [13] \p5 [14] \p5 [15] \p5 [16] \p5 [17] \p5 [31] }
    New input vector for $reduce_or cell $reduce_or$col_idct.v:204$196: { \p4 [8] \p4 [9] \p4 [10] \p4 [11] \p4 [12] \p4 [13] \p4 [14] \p4 [15] \p4 [16] \p4 [17] \p4 [31] }
    New input vector for $reduce_or cell $reduce_or$col_idct.v:203$193: { \p3 [8] \p3 [9] \p3 [10] \p3 [11] \p3 [12] \p3 [13] \p3 [14] \p3 [15] \p3 [16] \p3 [17] \p3 [31] }
    New input vector for $reduce_or cell $reduce_or$col_idct.v:202$190: { \p2 [8] \p2 [9] \p2 [10] \p2 [11] \p2 [12] \p2 [13] \p2 [14] \p2 [15] \p2 [16] \p2 [17] \p2 [31] }
    New input vector for $reduce_or cell $reduce_or$col_idct.v:201$187: { \p1 [8] \p1 [9] \p1 [10] \p1 [11] \p1 [12] \p1 [13] \p1 [14] \p1 [15] \p1 [16] \p1 [17] \p1 [31] }
    New input vector for $reduce_or cell $reduce_or$col_idct.v:200$184: { \p0 [8] \p0 [9] \p0 [10] \p0 [11] \p0 [12] \p0 [13] \p0 [14] \p0 [15] \p0 [16] \p0 [17] \p0 [31] }
    New input vector for $reduce_or cell $reduce_or$col_idct.v:151$19: { \alt_out [8] \alt_out [9] \alt_out [10] \alt_out [11] \alt_out [12] \alt_out [13] \alt_out [14] \alt_out [15] \alt_out [16] \alt_out [17] \alt_out [18] \alt_out [19] \alt_out [20] \alt_out [21] \alt_out [22] \alt_out [23] \alt_out [24] \alt_out [25] \alt_out [31] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$321: { $auto$alumacc.cc:490:replace_alu$319 [0] $auto$alumacc.cc:490:replace_alu$319 [1] $auto$alumacc.cc:490:replace_alu$319 [2] $auto$alumacc.cc:490:replace_alu$319 [3] $auto$alumacc.cc:490:replace_alu$319 [4] $auto$alumacc.cc:490:replace_alu$319 [5] $auto$alumacc.cc:490:replace_alu$319 [6] $auto$alumacc.cc:490:replace_alu$319 [7] $auto$alumacc.cc:490:replace_alu$319 [8] $auto$alumacc.cc:490:replace_alu$319 [9] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$332: { $auto$alumacc.cc:490:replace_alu$330 [0] $auto$alumacc.cc:490:replace_alu$330 [1] $auto$alumacc.cc:490:replace_alu$330 [2] $auto$alumacc.cc:490:replace_alu$330 [3] $auto$alumacc.cc:490:replace_alu$330 [4] $auto$alumacc.cc:490:replace_alu$330 [5] $auto$alumacc.cc:490:replace_alu$330 [6] $auto$alumacc.cc:490:replace_alu$330 [7] $auto$alumacc.cc:490:replace_alu$330 [8] $auto$alumacc.cc:490:replace_alu$330 [9] }
  Optimizing cells in module \col_idct.
Performed a total of 11 changes.

2.5.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\col_idct'.
Removed a total of 0 cells.

2.5.12.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.5.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \col_idct..
Removed 51 unused cells and 53 unused wires.
<suppressed ~58 debug messages>

2.5.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module col_idct.

2.5.12.9. Rerunning OPT passes. (Maybe there is more to do..)

2.5.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \col_idct..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.5.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \col_idct.
Performed a total of 0 changes.

2.5.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\col_idct'.
Removed a total of 0 cells.

2.5.12.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.5.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \col_idct..

2.5.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module col_idct.

2.5.12.16. Finished OPT passes. (There is nothing left to do.)

2.5.13. Executing FSM pass (extract and optimize FSM).

2.5.13.1. Executing FSM_DETECT pass (finding FSMs in design).

2.5.13.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.5.13.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.5.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \col_idct..

2.5.13.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.5.13.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.5.13.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.5.13.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.5.14. Executing OPT pass (performing simple optimizations).

2.5.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module col_idct.

2.5.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\col_idct'.
Removed a total of 0 cells.

2.5.14.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.5.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \col_idct..

2.5.14.5. Finished fast OPT passes.

2.5.15. Executing MEMORY pass.

2.5.15.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.5.15.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \col_idct..

2.5.15.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.5.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \col_idct..

2.5.15.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.5.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \col_idct..

2.6. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.7. Executing TECHMAP pass (map to technology primitives).

2.7.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/xilinx/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/xilinx/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__XILINX_RAMB36_SDP'.
Generating RTLIL representation for module `\$__XILINX_RAMB18_SDP'.
Generating RTLIL representation for module `\$__XILINX_RAMB36_TDP'.
Generating RTLIL representation for module `\$__XILINX_RAMB18_TDP'.
Successfully finished Verilog frontend.

2.7.2. Continuing TECHMAP pass.
No more expansions possible.

2.8. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.9. Executing TECHMAP pass (map to technology primitives).

2.9.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/xilinx/drams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/xilinx/drams_map.v' to AST representation.
Generating RTLIL representation for module `\$__XILINX_RAM32X1D'.
Generating RTLIL representation for module `\$__XILINX_RAM64X1D'.
Generating RTLIL representation for module `\$__XILINX_RAM128X1D'.
Successfully finished Verilog frontend.

2.9.2. Continuing TECHMAP pass.
No more expansions possible.

2.10. Executing PMUX2SHIFTX pass.

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module col_idct.
<suppressed ~7 debug messages>

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\col_idct'.
Removed a total of 0 cells.

2.11.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \col_idct..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.11.5. Finished fast OPT passes.

2.12. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.13. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.14. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Transforming FF to FF+Enable cells in module col_idct:

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module col_idct.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\col_idct'.
Removed a total of 0 cells.

2.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \col_idct..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \col_idct.
    Consolidated identical input bits for $mux cell $ternary$col_idct.v:151$20:
      Old ports: A={ 5'00000 \alt_out [25:0] }, B=31'0000000000000000000000011111111, Y=$auto$wreduce.cc:455:run$294 [30:0]
      New ports: A=\alt_out [25:0], B=26'00000000000000000011111111, Y=$auto$wreduce.cc:455:run$294 [25:0]
      New connections: $auto$wreduce.cc:455:run$294 [30:26] = 5'00000
    Consolidated identical input bits for $mux cell $ternary$col_idct.v:200$185:
      Old ports: A={ 13'0000000000000 \p0 [17:0] }, B=31'0000000000000000000000011111111, Y=$auto$wreduce.cc:455:run$295 [30:0]
      New ports: A=\p0 [17:0], B=18'000000000011111111, Y=$auto$wreduce.cc:455:run$295 [17:0]
      New connections: $auto$wreduce.cc:455:run$295 [30:18] = 13'0000000000000
    Consolidated identical input bits for $mux cell $ternary$col_idct.v:201$188:
      Old ports: A={ 13'0000000000000 \p1 [17:0] }, B=31'0000000000000000000000011111111, Y=$auto$wreduce.cc:455:run$296 [30:0]
      New ports: A=\p1 [17:0], B=18'000000000011111111, Y=$auto$wreduce.cc:455:run$296 [17:0]
      New connections: $auto$wreduce.cc:455:run$296 [30:18] = 13'0000000000000
    Consolidated identical input bits for $mux cell $ternary$col_idct.v:202$191:
      Old ports: A={ 13'0000000000000 \p2 [17:0] }, B=31'0000000000000000000000011111111, Y=$auto$wreduce.cc:455:run$297 [30:0]
      New ports: A=\p2 [17:0], B=18'000000000011111111, Y=$auto$wreduce.cc:455:run$297 [17:0]
      New connections: $auto$wreduce.cc:455:run$297 [30:18] = 13'0000000000000
    Consolidated identical input bits for $mux cell $ternary$col_idct.v:202$192:
      Old ports: A={ 1'0 $auto$wreduce.cc:455:run$297 [30:0] }, B=0, Y=\yc2
      New ports: A=$auto$wreduce.cc:455:run$297 [30:0], B=31'0000000000000000000000000000000, Y=\yc2 [30:0]
      New connections: \yc2 [31] = 1'0
    Consolidated identical input bits for $mux cell $ternary$col_idct.v:203$194:
      Old ports: A={ 13'0000000000000 \p3 [17:0] }, B=31'0000000000000000000000011111111, Y=$ternary$col_idct.v:203$194_Y [30:0]
      New ports: A=\p3 [17:0], B=18'000000000011111111, Y=$ternary$col_idct.v:203$194_Y [17:0]
      New connections: $ternary$col_idct.v:203$194_Y [30:18] = 13'0000000000000
    Consolidated identical input bits for $mux cell $ternary$col_idct.v:204$197:
      Old ports: A={ 13'0000000000000 \p4 [17:0] }, B=31'0000000000000000000000011111111, Y=$ternary$col_idct.v:204$197_Y [30:0]
      New ports: A=\p4 [17:0], B=18'000000000011111111, Y=$ternary$col_idct.v:204$197_Y [17:0]
      New connections: $ternary$col_idct.v:204$197_Y [30:18] = 13'0000000000000
    Consolidated identical input bits for $mux cell $ternary$col_idct.v:205$200:
      Old ports: A={ 13'0000000000000 \p5 [17:0] }, B=31'0000000000000000000000011111111, Y=$ternary$col_idct.v:205$200_Y [30:0]
      New ports: A=\p5 [17:0], B=18'000000000011111111, Y=$ternary$col_idct.v:205$200_Y [17:0]
      New connections: $ternary$col_idct.v:205$200_Y [30:18] = 13'0000000000000
    Consolidated identical input bits for $mux cell $ternary$col_idct.v:205$201:
      Old ports: A={ 1'0 $ternary$col_idct.v:205$200_Y [30:0] }, B=0, Y=\yc5
      New ports: A=$ternary$col_idct.v:205$200_Y [30:0], B=31'0000000000000000000000000000000, Y=\yc5 [30:0]
      New connections: \yc5 [31] = 1'0
    Consolidated identical input bits for $mux cell $ternary$col_idct.v:206$203:
      Old ports: A={ 13'0000000000000 \p6 [17:0] }, B=31'0000000000000000000000011111111, Y=$auto$wreduce.cc:455:run$298 [30:0]
      New ports: A=\p6 [17:0], B=18'000000000011111111, Y=$auto$wreduce.cc:455:run$298 [17:0]
      New connections: $auto$wreduce.cc:455:run$298 [30:18] = 13'0000000000000
    Consolidated identical input bits for $mux cell $ternary$col_idct.v:207$206:
      Old ports: A={ 13'0000000000000 \p7 [17:0] }, B=31'0000000000000000000000011111111, Y=$ternary$col_idct.v:207$206_Y [30:0]
      New ports: A=\p7 [17:0], B=18'000000000011111111, Y=$ternary$col_idct.v:207$206_Y [17:0]
      New connections: $ternary$col_idct.v:207$206_Y [30:18] = 13'0000000000000
  Optimizing cells in module \col_idct.
    Consolidated identical input bits for $mux cell $procmux$230:
      Old ports: A=\yc2, B={ 1'0 \alt_out_clipped }, Y=$procmux$230_Y
      New ports: A=\yc2 [30:0], B=\alt_out_clipped, Y=$procmux$230_Y [30:0]
      New connections: $procmux$230_Y [31] = 1'0
    Consolidated identical input bits for $mux cell $procmux$254:
      Old ports: A=\yc5, B={ 1'0 \alt_out_clipped }, Y=$procmux$254_Y
      New ports: A=\yc5 [30:0], B=\alt_out_clipped, Y=$procmux$254_Y [30:0]
      New connections: $procmux$254_Y [31] = 1'0
    Consolidated identical input bits for $mux cell $ternary$col_idct.v:151$21:
      Old ports: A=$auto$wreduce.cc:455:run$294 [30:0], B=31'0000000000000000000000000000000, Y=\alt_out_clipped
      New ports: A=$auto$wreduce.cc:455:run$294 [25:0], B=26'00000000000000000000000000, Y=\alt_out_clipped [25:0]
      New connections: \alt_out_clipped [30:26] = 5'00000
    Consolidated identical input bits for $mux cell $ternary$col_idct.v:200$186:
      Old ports: A=$auto$wreduce.cc:455:run$295 [30:0], B=31'0000000000000000000000000000000, Y=\yc0
      New ports: A=$auto$wreduce.cc:455:run$295 [17:0], B=18'000000000000000000, Y=\yc0 [17:0]
      New connections: \yc0 [30:18] = 13'0000000000000
    Consolidated identical input bits for $mux cell $ternary$col_idct.v:201$189:
      Old ports: A=$auto$wreduce.cc:455:run$296 [30:0], B=31'0000000000000000000000000000000, Y=\yc1
      New ports: A=$auto$wreduce.cc:455:run$296 [17:0], B=18'000000000000000000, Y=\yc1 [17:0]
      New connections: \yc1 [30:18] = 13'0000000000000
    Consolidated identical input bits for $mux cell $ternary$col_idct.v:202$192:
      Old ports: A=$auto$wreduce.cc:455:run$297 [30:0], B=31'0000000000000000000000000000000, Y=\yc2 [30:0]
      New ports: A=$auto$wreduce.cc:455:run$297 [17:0], B=18'000000000000000000, Y=\yc2 [17:0]
      New connections: \yc2 [30:18] = 13'0000000000000
    Consolidated identical input bits for $mux cell $ternary$col_idct.v:203$195:
      Old ports: A=$ternary$col_idct.v:203$194_Y [30:0], B=31'0000000000000000000000000000000, Y=\yc3 [30:0]
      New ports: A=$ternary$col_idct.v:203$194_Y [17:0], B=18'000000000000000000, Y=\yc3 [17:0]
      New connections: \yc3 [30:18] = 13'0000000000000
    Consolidated identical input bits for $mux cell $ternary$col_idct.v:204$198:
      Old ports: A=$ternary$col_idct.v:204$197_Y [30:0], B=31'0000000000000000000000000000000, Y=\yc4 [30:0]
      New ports: A=$ternary$col_idct.v:204$197_Y [17:0], B=18'000000000000000000, Y=\yc4 [17:0]
      New connections: \yc4 [30:18] = 13'0000000000000
    Consolidated identical input bits for $mux cell $ternary$col_idct.v:205$201:
      Old ports: A=$ternary$col_idct.v:205$200_Y [30:0], B=31'0000000000000000000000000000000, Y=\yc5 [30:0]
      New ports: A=$ternary$col_idct.v:205$200_Y [17:0], B=18'000000000000000000, Y=\yc5 [17:0]
      New connections: \yc5 [30:18] = 13'0000000000000
    Consolidated identical input bits for $mux cell $ternary$col_idct.v:206$204:
      Old ports: A=$auto$wreduce.cc:455:run$298 [30:0], B=31'0000000000000000000000000000000, Y=\yc6
      New ports: A=$auto$wreduce.cc:455:run$298 [17:0], B=18'000000000000000000, Y=\yc6 [17:0]
      New connections: \yc6 [30:18] = 13'0000000000000
    Consolidated identical input bits for $mux cell $ternary$col_idct.v:207$207:
      Old ports: A=$ternary$col_idct.v:207$206_Y [30:0], B=31'0000000000000000000000000000000, Y=\yc7 [30:0]
      New ports: A=$ternary$col_idct.v:207$206_Y [17:0], B=18'000000000000000000, Y=\yc7 [17:0]
      New connections: \yc7 [30:18] = 13'0000000000000
  Optimizing cells in module \col_idct.
    Consolidated identical input bits for $mux cell $procmux$209:
      Old ports: A=\yc0, B=\alt_out_clipped, Y=$auto$wreduce.cc:455:run$288 [30:0]
      New ports: A={ 8'00000000 \yc0 [17:0] }, B=\alt_out_clipped [25:0], Y=$auto$wreduce.cc:455:run$288 [25:0]
      New connections: $auto$wreduce.cc:455:run$288 [30:26] = 5'00000
    Consolidated identical input bits for $mux cell $procmux$230:
      Old ports: A=\yc2 [30:0], B=\alt_out_clipped, Y=$procmux$230_Y [30:0]
      New ports: A={ 8'00000000 \yc2 [17:0] }, B=\alt_out_clipped [25:0], Y=$procmux$230_Y [25:0]
      New connections: $procmux$230_Y [30:26] = 5'00000
    Consolidated identical input bits for $mux cell $procmux$233:
      Old ports: A=$procmux$230_Y, B=0, Y=$0\y2[31:0]
      New ports: A=$procmux$230_Y [30:0], B=31'0000000000000000000000000000000, Y=$0\y2[31:0] [30:0]
      New connections: $0\y2[31:0] [31] = 1'0
    Consolidated identical input bits for $mux cell $procmux$236:
      Old ports: A=\yc1, B=\alt_out_clipped, Y=$auto$wreduce.cc:455:run$289 [30:0]
      New ports: A={ 8'00000000 \yc1 [17:0] }, B=\alt_out_clipped [25:0], Y=$auto$wreduce.cc:455:run$289 [25:0]
      New connections: $auto$wreduce.cc:455:run$289 [30:26] = 5'00000
    Consolidated identical input bits for $mux cell $procmux$242:
      Old ports: A=\yc7 [30:0], B=\alt_out_clipped, Y=$auto$wreduce.cc:455:run$290 [30:0]
      New ports: A={ 8'00000000 \yc7 [17:0] }, B=\alt_out_clipped [25:0], Y=$auto$wreduce.cc:455:run$290 [25:0]
      New connections: $auto$wreduce.cc:455:run$290 [30:26] = 5'00000
    Consolidated identical input bits for $mux cell $procmux$248:
      Old ports: A=\yc6, B=\alt_out_clipped, Y=$auto$wreduce.cc:455:run$291 [30:0]
      New ports: A={ 8'00000000 \yc6 [17:0] }, B=\alt_out_clipped [25:0], Y=$auto$wreduce.cc:455:run$291 [25:0]
      New connections: $auto$wreduce.cc:455:run$291 [30:26] = 5'00000
    Consolidated identical input bits for $mux cell $procmux$254:
      Old ports: A=\yc5 [30:0], B=\alt_out_clipped, Y=$procmux$254_Y [30:0]
      New ports: A={ 8'00000000 \yc5 [17:0] }, B=\alt_out_clipped [25:0], Y=$procmux$254_Y [25:0]
      New connections: $procmux$254_Y [30:26] = 5'00000
    Consolidated identical input bits for $mux cell $procmux$257:
      Old ports: A=$procmux$254_Y, B=0, Y=$0\y5[31:0]
      New ports: A=$procmux$254_Y [30:0], B=31'0000000000000000000000000000000, Y=$0\y5[31:0] [30:0]
      New connections: $0\y5[31:0] [31] = 1'0
    Consolidated identical input bits for $mux cell $procmux$260:
      Old ports: A=\yc4 [30:0], B=\alt_out_clipped, Y=$auto$wreduce.cc:455:run$292 [30:0]
      New ports: A={ 8'00000000 \yc4 [17:0] }, B=\alt_out_clipped [25:0], Y=$auto$wreduce.cc:455:run$292 [25:0]
      New connections: $auto$wreduce.cc:455:run$292 [30:26] = 5'00000
    Consolidated identical input bits for $mux cell $procmux$266:
      Old ports: A=\yc3 [30:0], B=\alt_out_clipped, Y=$auto$wreduce.cc:455:run$293 [30:0]
      New ports: A={ 8'00000000 \yc3 [17:0] }, B=\alt_out_clipped [25:0], Y=$auto$wreduce.cc:455:run$293 [25:0]
      New connections: $auto$wreduce.cc:455:run$293 [30:26] = 5'00000
  Optimizing cells in module \col_idct.
    Consolidated identical input bits for $mux cell $procmux$212:
      Old ports: A=$auto$wreduce.cc:455:run$288 [30:0], B=31'0000000000000000000000000000000, Y=$0\y0[31:0]
      New ports: A=$auto$wreduce.cc:455:run$288 [25:0], B=26'00000000000000000000000000, Y=$0\y0[31:0] [25:0]
      New connections: $0\y0[31:0] [30:26] = 5'00000
    Consolidated identical input bits for $mux cell $procmux$233:
      Old ports: A=$procmux$230_Y [30:0], B=31'0000000000000000000000000000000, Y=$0\y2[31:0] [30:0]
      New ports: A=$procmux$230_Y [25:0], B=26'00000000000000000000000000, Y=$0\y2[31:0] [25:0]
      New connections: $0\y2[31:0] [30:26] = 5'00000
    Consolidated identical input bits for $mux cell $procmux$239:
      Old ports: A=$auto$wreduce.cc:455:run$289 [30:0], B=31'0000000000000000000000000000000, Y=$0\y1[31:0]
      New ports: A=$auto$wreduce.cc:455:run$289 [25:0], B=26'00000000000000000000000000, Y=$0\y1[31:0] [25:0]
      New connections: $0\y1[31:0] [30:26] = 5'00000
    Consolidated identical input bits for $mux cell $procmux$245:
      Old ports: A=$auto$wreduce.cc:455:run$290 [30:0], B=31'0000000000000000000000000000000, Y=$0\y7[31:0]
      New ports: A=$auto$wreduce.cc:455:run$290 [25:0], B=26'00000000000000000000000000, Y=$0\y7[31:0] [25:0]
      New connections: $0\y7[31:0] [30:26] = 5'00000
    Consolidated identical input bits for $mux cell $procmux$251:
      Old ports: A=$auto$wreduce.cc:455:run$291 [30:0], B=31'0000000000000000000000000000000, Y=$0\y6[31:0]
      New ports: A=$auto$wreduce.cc:455:run$291 [25:0], B=26'00000000000000000000000000, Y=$0\y6[31:0] [25:0]
      New connections: $0\y6[31:0] [30:26] = 5'00000
    Consolidated identical input bits for $mux cell $procmux$257:
      Old ports: A=$procmux$254_Y [30:0], B=31'0000000000000000000000000000000, Y=$0\y5[31:0] [30:0]
      New ports: A=$procmux$254_Y [25:0], B=26'00000000000000000000000000, Y=$0\y5[31:0] [25:0]
      New connections: $0\y5[31:0] [30:26] = 5'00000
    Consolidated identical input bits for $mux cell $procmux$263:
      Old ports: A=$auto$wreduce.cc:455:run$292 [30:0], B=31'0000000000000000000000000000000, Y=$0\y4[31:0]
      New ports: A=$auto$wreduce.cc:455:run$292 [25:0], B=26'00000000000000000000000000, Y=$0\y4[31:0] [25:0]
      New connections: $0\y4[31:0] [30:26] = 5'00000
    Consolidated identical input bits for $mux cell $procmux$269:
      Old ports: A=$auto$wreduce.cc:455:run$293 [30:0], B=31'0000000000000000000000000000000, Y=$0\y3[31:0]
      New ports: A=$auto$wreduce.cc:455:run$293 [25:0], B=26'00000000000000000000000000, Y=$0\y3[31:0] [25:0]
      New connections: $0\y3[31:0] [30:26] = 5'00000
  Optimizing cells in module \col_idct.
Performed a total of 40 changes.

2.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\col_idct'.
Removed a total of 0 cells.

2.15.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \col_idct..

2.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module col_idct.

2.15.9. Rerunning OPT passes. (Maybe there is more to do..)

2.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \col_idct..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \col_idct.
Performed a total of 0 changes.

2.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\col_idct'.
Removed a total of 0 cells.

2.15.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \col_idct..

2.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module col_idct.

2.15.16. Finished OPT passes. (There is nothing left to do.)

2.16. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping col_idct.$procdff$271 ($dff).
Mapping col_idct.$procdff$272 ($dff).
Mapping col_idct.$procdff$273 ($dff).
Mapping col_idct.$procdff$274 ($dff).
Mapping col_idct.$procdff$275 ($dff).
Mapping col_idct.$procdff$276 ($dff).
Mapping col_idct.$procdff$277 ($dff).
Mapping col_idct.$procdff$278 ($dff).
Mapping col_idct.$procdff$279 ($dff).
Mapping col_idct.$procdff$280 ($dff).

2.17. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

2.18. Executing TECHMAP pass (map to technology primitives).

2.18.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.18.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/xilinx/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/xilinx/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_xilinx_lcu'.
Generating RTLIL representation for module `\_80_xilinx_alu'.
Successfully finished Verilog frontend.

2.18.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper maccmap for cells of type $macc.
  add \t5 (32 bits, signed)
  sub \in6 (32 bits, signed)
  sub { \in6 [22:0] 9'000000000 } (32 bits, signed)
  sub { \in6 [23:0] 8'00000000 } (32 bits, signed)
  sub { \in6 [27:0] 4'0000 } (32 bits, signed)
  sub { \in6 [28:0] 3'000 } (32 bits, signed)
  sub { \in6 [29:0] 2'00 } (32 bits, signed)
  sub { \in6 [30:0] 1'0 } (32 bits, signed)
  packed 7 (3) bits / 1 words into adder tree
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$a9d3f8b70a09ff324e0e16ee8390dda95258b6a1\_80_xilinx_alu for cells of type $alu.
Using template $paramod$e1e26e703584cf018307bbbeeccde8fdc7b4eecf\_80_xilinx_alu for cells of type $alu.
Using template $paramod$c4ad4d678220a0f1453d4726ac4c5d96a5dca464\_80_xilinx_alu for cells of type $alu.
Using template $paramod$5fe4bf62195f5589c8772d9176279b55b3b75225\_80_xilinx_alu for cells of type $alu.
Using template $paramod$b3d12a61784303b992cd3692f391c1a6da732ba6\_80_xilinx_alu for cells of type $alu.
Using template $paramod$719b7377ef9ef9687a4f925f8696c903232706da\_80_xilinx_alu for cells of type $alu.
Using template $paramod$6d7d6533a40646a70196bcd3ac7746feb1136da5\_80_xilinx_alu for cells of type $alu.
Using template $paramod$2a61f516209e0fa4ee7297520d78e05c9ef2971a\_80_xilinx_alu for cells of type $alu.
Using template $paramod$bddb58a38f6de186dfcb4221aca08755e1dec4f9\_80_xilinx_alu for cells of type $alu.
Using template $paramod$dc6ad280c69521aaf9506a837e5afa602bc04c62\_80_xilinx_alu for cells of type $alu.
Using template $paramod$67e32d06bdc742f1b8a98d2f953bfe2e13bfffd1\_80_xilinx_alu for cells of type $alu.
Using template $paramod$90301c4f2f9919d0fc59ca1ffe5e93f658d3e7d1\_80_xilinx_alu for cells of type $alu.
Using template $paramod$f6f53025d9619295431b882d89012cfb5e537b8c\_80_xilinx_alu for cells of type $alu.
Using template $paramod$c9383d18e95d0bbc35eb52c4382dcff3612873f7\_80_xilinx_alu for cells of type $alu.
Using template $paramod$73101cf9c06e5b872d6d705cf005caa3f4beec99\_80_xilinx_alu for cells of type $alu.
Using template $paramod$3bcbcadede8d88d1c58b7b1e171878366fe0adb6\_80_xilinx_alu for cells of type $alu.
  add \t1 (32 bits, signed)
  sub { \in5 [30:0] 1'0 } (32 bits, signed)
  sub { \in5 [20:0] 11'00000000000 } (32 bits, signed)
  sub { \in5 [21:0] 10'0000000000 } (32 bits, signed)
  sub { \in5 [23:0] 8'00000000 } (32 bits, signed)
  sub { \in5 [25:0] 6'000000 } (32 bits, signed)
  sub { \in5 [28:0] 3'000 } (32 bits, signed)
  sub { \in5 [29:0] 2'00 } (32 bits, signed)
  packed 7 (3) bits / 1 words into adder tree
  add \t5 (32 bits, signed)
  sub \in7 (32 bits, signed)
  sub { \in7 [20:0] 11'00000000000 } (32 bits, signed)
  sub { \in7 [21:0] 10'0000000000 } (32 bits, signed)
  sub { \in7 [22:0] 9'000000000 } (32 bits, signed)
  sub { \in7 [23:0] 8'00000000 } (32 bits, signed)
  sub { \in7 [24:0] 7'0000000 } (32 bits, signed)
  sub { \in7 [26:0] 5'00000 } (32 bits, signed)
  sub { \in7 [27:0] 4'0000 } (32 bits, signed)
  packed 8 (1) bits / 1 words into adder tree
  add { \t8 2'00 } (32 bits, signed)
  add { \t8 [21:0] 10'0000000000 } (32 bits, signed)
  add { \t8 [25:0] 6'000000 } (32 bits, signed)
  add { \t8 [27:0] 4'0000 } (32 bits, signed)
  add 4 (32 bits, unsigned)
Using template $paramod$11355b9b42c2988c50f848efad9b289fe79bda83\_80_xilinx_alu for cells of type $alu.
  add \t9 (32 bits, signed)
  sub { \in2 [28:0] 3'000 } (32 bits, signed)
  sub { \in2 [20:0] 11'00000000000 } (32 bits, signed)
  sub { \in2 [21:0] 10'0000000000 } (32 bits, signed)
  sub { \in2 [22:0] 9'000000000 } (32 bits, signed)
  sub { \in2 [24:0] 7'0000000 } (32 bits, signed)
  sub { \in2 [25:0] 6'000000 } (32 bits, signed)
  packed 6 (2) bits / 1 words into adder tree
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $not.
Using template $paramod$1ad153068b051c46110ee737d96089ac61bc2363\_80_xilinx_alu for cells of type $alu.
  add \t0 (32 bits, signed)
  add { \t0 [22:0] 9'000000000 } (32 bits, signed)
  add { \t0 [26:0] 5'00000 } (32 bits, signed)
  add { \t0 [27:0] 4'0000 } (32 bits, signed)
  add { \t0 [29:0] 2'00 } (32 bits, signed)
  add 4 (32 bits, unsigned)
  add \t9 (32 bits, signed)
  add { \in3 [26:0] 5'00000 } (32 bits, signed)
  add { \in3 [21:0] 10'0000000000 } (32 bits, signed)
  add { \in3 [22:0] 9'000000000 } (32 bits, signed)
  add \t12 (32 bits, signed)
  add { \t12 [24:0] 7'0000000 } (32 bits, signed)
  add { \t12 [26:0] 5'00000 } (32 bits, signed)
  add { \t12 [27:0] 4'0000 } (32 bits, signed)
  add { \t12 [29:0] 2'00 } (32 bits, signed)
  add 128 (32 bits, unsigned)
  add \t1 (32 bits, signed)
  add { \in4 [29:0] 2'00 } (32 bits, signed)
  add { \in4 [20:0] 11'00000000000 } (32 bits, signed)
  add { \in4 [24:0] 7'0000000 } (32 bits, signed)
  add { \in4 [25:0] 6'000000 } (32 bits, signed)
  add { \in4 [26:0] 5'00000 } (32 bits, signed)
  add { \t4 3'000 } (32 bits, signed)
  add { \t4 [20:0] 11'00000000000 } (32 bits, signed)
  add { \t4 [23:0] 8'00000000 } (32 bits, signed)
  add { \t4 [25:0] 6'000000 } (32 bits, signed)
  add { \t4 [26:0] 5'00000 } (32 bits, signed)
  add 4 (32 bits, unsigned)
  add \t14 (32 bits, signed)
  add { \t14 [24:0] 7'0000000 } (32 bits, signed)
  add { \t14 [26:0] 5'00000 } (32 bits, signed)
  add { \t14 [27:0] 4'0000 } (32 bits, signed)
  add { \t14 [29:0] 2'00 } (32 bits, signed)
  add 128 (32 bits, unsigned)
Using template $paramod$0f5c26f6ef477051fc7896168cf10301bc73e165\_80_xilinx_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=27 for cells of type $fa.
Using template $paramod$bf3b5fab9e093d19bbea16c6516a73d098dbaa75\_80_xilinx_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=26 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=30 for cells of type $fa.
Using template $paramod$b91837054f34aba236a6086ffe7be7f007625250\_80_xilinx_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~1087 debug messages>

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module col_idct.
<suppressed ~3452 debug messages>

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\col_idct'.
<suppressed ~3429 debug messages>
Removed a total of 1143 cells.

2.19.3. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$700 ($_DFF_P_) from module col_idct.
Replaced 1 DFF cells.

2.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \col_idct..
Removed 1177 unused cells and 1429 unused wires.
<suppressed ~1178 debug messages>

2.19.5. Rerunning OPT passes. (Removed registers in this run.)

2.19.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module col_idct.

2.19.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\col_idct'.
Removed a total of 0 cells.

2.19.8. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \col_idct..

2.19.10. Finished fast OPT passes.

2.20. Executing TECHMAP pass (map to technology primitives).

2.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.20.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/xilinx/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/xilinx/cells_map.v' to AST representation.
Generating RTLIL representation for module `\_90_dff_nn0_to_np0'.
Generating RTLIL representation for module `\_90_dff_pn0_to_pp0'.
Generating RTLIL representation for module `\_90_dff_nn1_to_np1'.
Generating RTLIL representation for module `\_90_dff_pn1_to_pp1'.
Generating RTLIL representation for module `\$__SHREG_'.
Generating RTLIL representation for module `\$__XILINX_SHREG_'.
Successfully finished Verilog frontend.

2.20.3. Continuing TECHMAP pass.
No more expansions possible.

2.21. Executing ABC pass (technology mapping using ABC).

2.21.1. Extracting gate netlist of module `\col_idct' to `<abc-temp-dir>/input.blif'..
Extracted 9391 gates and 10643 wires to a netlist network with 1250 inputs and 2216 outputs.

2.21.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: Currently "mfs" cannot process the network containing nodes with more than 6 fanins.
ABC: + write_blif <abc-temp-dir>/output.blif 

2.21.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:     7564
ABC RESULTS:        internal signals:     7177
ABC RESULTS:           input signals:     1250
ABC RESULTS:          output signals:     2216
Removing temp directory.
Removed 0 unused cells and 1804 unused wires.

2.22. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

2.23. Executing TECHMAP pass (map to technology primitives).

2.23.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/xilinx/lut_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/xilinx/lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.23.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/xilinx/ff_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/xilinx/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Successfully finished Verilog frontend.

2.23.3. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/xilinx/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/xilinx/cells_map.v' to AST representation.
Generating RTLIL representation for module `\_90_dff_nn0_to_np0'.
Generating RTLIL representation for module `\_90_dff_pn0_to_pp0'.
Generating RTLIL representation for module `\_90_dff_nn1_to_np1'.
Generating RTLIL representation for module `\_90_dff_pn1_to_pp1'.
Generating RTLIL representation for module `\$__SHREG_'.
Generating RTLIL representation for module `\$__XILINX_SHREG_'.
Successfully finished Verilog frontend.

2.23.4. Continuing TECHMAP pass.
Using template $paramod$53afc4693cdd4770ebaebeb0ab6c288fde062f75\$lut for cells of type $lut.
Using template $paramod$b5cd238a527d851ba52055b76f8b8313ff4d0a1d\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod$57619346c001bba14f685682aaa48a843cd5a7a5\$lut for cells of type $lut.
Using template $paramod$ccce4f3946ebc1c1bbc18bd1adc9add9d368a18e\$lut for cells of type $lut.
Using template $paramod$fd981d57d953ba8dcac298d3386c951aac959b56\$lut for cells of type $lut.
Using template $paramod$9c1fdb72bfab429eb035e50b86046f0edb412905\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod$e10ca4aca4e4c8627be5bb912095a9253494b061\$lut for cells of type $lut.
Using template $paramod$5fba6fa4affd3d8cb90b92595f737467c857f3c8\$lut for cells of type $lut.
Using template $paramod$0c42c6f98ed5468b571b48aa19e580bed9944e25\$lut for cells of type $lut.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01101001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101000 for cells of type $lut.
Using template $paramod$48074aea63b83814e2eef7ec29047834c2282d54\$lut for cells of type $lut.
Using template $paramod$230a0993d3ccc6975acb35f325832aedc969eceb\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod$2372381f45d474b3eb5c787077cd8c0e73353efe\$lut for cells of type $lut.
Using template $paramod$25b5f51062916bb0a54ff243480490e70a53e676\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110100000010111 for cells of type $lut.
Using template $paramod$f5c6a3f371e9dac49537bd38fe634c2079b7d847\$lut for cells of type $lut.
Using template $paramod$e474f84c82f637cf8c6e40c8d0b5f22545436888\$lut for cells of type $lut.
Using template $paramod$93b751933c7214c650796d39b9f2663bcaef21e1\$lut for cells of type $lut.
Using template $paramod$e39dcb296ebd30fff7828e854c6f46ea04b5da7f\$lut for cells of type $lut.
Using template $paramod$7f2927c782b71cfe5d3c30a361ea7f7c4c75a33e\$lut for cells of type $lut.
Using template $paramod$be0087759d54af265aed3051c23c5d6bbcc19330\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110100 for cells of type $lut.
Using template $paramod$4ea6bc3a4016105ddc8e72b4923571f70e57e1ae\$lut for cells of type $lut.
Using template $paramod$628a582e01473f35d544d2b3b382ecb854fa639d\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=1905167985 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=805372208 for cells of type $lut.
Using template $paramod$f38aa353bb538a124b3542f9752a00cdd4de2e62\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001011001101001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10111111111111110000000000000000 for cells of type $lut.
Using template $paramod$e03d725c946b804a959243457672cd3bae7aec86\$lut for cells of type $lut.
Using template $paramod$ad8166c0abe32f9fa19a4f6afd6a63d01d6fe665\$lut for cells of type $lut.
Using template $paramod$1509d33cfda85af8cbde32c6ece6139cf2727518\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod$2f6c7dc5cae260930570849081a7b1a9228282c7\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010100 for cells of type $lut.
Using template $paramod$ee6706c40a9767a0977ba54baf54693662e4852a\$lut for cells of type $lut.
Using template $paramod$034dd8818cb1a4143d5114f9f5a0faac6b92b2f5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000100010100 for cells of type $lut.
Using template $paramod$4539c1e4faca4dd688a8de3c7b32d6eadc6d2591\$lut for cells of type $lut.
Using template $paramod$47102dd47b9cfdba9267589f5429eefbd94e659f\$lut for cells of type $lut.
Using template $paramod$cdc06dd47566be68617993582828b08e8865ffce\$lut for cells of type $lut.
Using template $paramod$902ccc2750d3b329bd9def303a66d27f06fe2985\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011001010100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=339820820 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod$ebc611f67103e8b908b3dbe9fd8a6efd6464b2d6\$lut for cells of type $lut.
Using template $paramod$f485bfddf5e7a378d734db78f8a4977cc673a0f4\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10001110011100010111000110001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod$408a426ca9859e95d2a4372d0d2905e3e3cd8072\$lut for cells of type $lut.
Using template $paramod$2fa47df92ffdd25985da290121250cbbd5755b33\$lut for cells of type $lut.
Using template $paramod$acaedc6ad0dcc76ba37a7d721b4c8a3204a2d11e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=692311740 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11010100001010110010101111010100 for cells of type $lut.
Using template $paramod$4526d80447623a44cc5440201b31f80a3ecf6064\$lut for cells of type $lut.
Using template $paramod$7e5554b8ec1728303678e7c0d365390dede97dc8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=1717592064 for cells of type $lut.
Using template $paramod$e3d111a282d3f094464950c774735ff42952aef6\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=1711670784 for cells of type $lut.
Using template $paramod$a8c5e02d8964cd06da23c17ed92fafe794de6615\$lut for cells of type $lut.
Using template $paramod$57c00875d56a2d9661f0c3dbbaa1e2ce1401f8c6\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111001110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=1771476585 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10110010010011010100110110110010 for cells of type $lut.
Using template $paramod$6702df7b4afdbd150f1ea73b3bf59cda1924468a\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=401139735 for cells of type $lut.
Using template $paramod$1e991aac370b3aefd3f31b7fa7b9a06ff978e294\$lut for cells of type $lut.
Using template $paramod$75b780655b19dc44306a0c85a7982e929fc46468\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000110001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10010110011010010110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000011101111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100101110110100 for cells of type $lut.
Using template $paramod$4ce96631b4daa71f17fc7a53cfa0a62f86d56321\$lut for cells of type $lut.
Using template $paramod$347ce277877f8affba6ab5cee681e95c6638b529\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10111010001000000010000010111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00101011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10110100010010110100101110110100 for cells of type $lut.
Using template $paramod$911a41fd4889aa7688659d3f571bf3c8f00a1d09\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=518096760 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000100000000 for cells of type $lut.
Using template $paramod$7cee5b9e5400a4599537aaeb58e88cf42b5497f8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=15773947 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11100000000010000000100011100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011010001001011 for cells of type $lut.
Using template $paramod$f34efa6df7afcddf9f75ee086f1c611ad891f39f\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11101000100011101000111011101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10000010111010111110101110000010 for cells of type $lut.
Using template $paramod$c9870cf56baaffe4056ca97953cd641e868f81c0\$lut for cells of type $lut.
Using template $paramod$653dbbc5496a5e65a22d302d40f55f55f96888aa\$lut for cells of type $lut.
Using template $paramod$e90df2d3f610cab8d0ea3c04266c2bf537ce41c2\$lut for cells of type $lut.
Using template $paramod$1c1171fbab37a59ccd35bd01b9596dfd2e78d5c3\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=18175871 for cells of type $lut.
Using template $paramod$f5cfa2640a74908ee9d15cb03f2184c7ab9d682e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110001 for cells of type $lut.
Using template $paramod$cad2520f0d905ae52b56e1cd618aec9bb16e736e\$lut for cells of type $lut.
Using template $paramod$080b96bcefa3a448115ea94aad50b23ed5902a4b\$lut for cells of type $lut.
Using template $paramod$b0eec318c85a06a7ace6cb2177979f4ac89c99c7\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=125827200 for cells of type $lut.
Using template $paramod$9c6431f482c88e6179d8b2ed36a556c72371578f\$lut for cells of type $lut.
Using template $paramod$0078626864b15e4ada0e2807a2e4c8fea2ba72f8\$lut for cells of type $lut.
Using template $paramod$08f67196f4ba8885bb8411a0812b7ea526396018\$lut for cells of type $lut.
Using template $paramod$e1c3a13be2a953c8adadc792ba330629e2b624a8\$lut for cells of type $lut.
Using template $paramod$2d041c6f03d85444b72f72c262311a1907d17b7e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110100010001110 for cells of type $lut.
Using template $paramod$fa11667f86b511b4a6f75385369f56211280a567\$lut for cells of type $lut.
Using template $paramod$4a58549b663f5793b864348eebce218abe7aaaef\$lut for cells of type $lut.
Using template $paramod$b8cc232f12f0d09bf393dc2fa402f650c63098dd\$lut for cells of type $lut.
Using template $paramod$25fe1c0a94e48405a930fc33ce0f433c355bade9\$lut for cells of type $lut.
Using template $paramod$f76f654359c8c212499e96bc449caa6b571ae680\$lut for cells of type $lut.
Using template $paramod$64e2b6acb4f5cfabab599bd0e63ce33f0e679092\$lut for cells of type $lut.
Using template $paramod$acc9db6971dfd0ab4b5de9f3b03e292ea0a632d2\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=401139944 for cells of type $lut.
Using template $paramod$cd970ad1e82e75f1ac0e4f19b385622566e51d6a\$lut for cells of type $lut.
Using template $paramod$d490e7a0a3599a850d8d45ad9cc4a7131af197ed\$lut for cells of type $lut.
Using template $paramod$ec23833946fdd7eb62e4c9c091519c4f6d9fa24a\$lut for cells of type $lut.
Using template $paramod$ae723dfb4383bc4714915081b70b2e47323466c4\$lut for cells of type $lut.
Using template $paramod$78ca38af3a1fa489ab7e4c2e2228f11fe731d51e\$lut for cells of type $lut.
Using template $paramod$d729dcefbcf4d2c6dfd318bd4554061faa79a82d\$lut for cells of type $lut.
Using template $paramod$8cc18a69da6058796ed515d67d44fcbced3f5563\$lut for cells of type $lut.
Using template $paramod$b15014270b3c410f9674ce44c3d26690206854f8\$lut for cells of type $lut.
Using template $paramod$02f9bf54f939a7174edb4b01ca8604bc6c557155\$lut for cells of type $lut.
Using template $paramod$f45f4b675e9e3a224f887761849a2e116af94de1\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=1303556685 for cells of type $lut.
Using template $paramod$01a06f2f4663343c7a558c6e609987a7fd30d420\$lut for cells of type $lut.
Using template $paramod$7cfd67a5230151cb882f55b188ad6272532e53f5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10010110000000000000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=1610612736 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=1030472340 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10011100011000111110011100011000 for cells of type $lut.
Using template $paramod$d2c804d9e97fff214132015f4bc6010888f45681\$lut for cells of type $lut.
Using template $paramod$63fcc51695a8693c53a4d60832352173844e7851\$lut for cells of type $lut.
Using template $paramod$59c6d0029be7aae07dd6162fb3230fd05a255f2d\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod$7ec8d0c1bd2e9b56dfe9c6c062084ccceadf3ee9\$lut for cells of type $lut.
Using template $paramod$50287004085c065cc5613c6d81a7e85ac9da110d\$lut for cells of type $lut.
Using template $paramod$6dd5bdb0b2c1bcadbecc3d774b66f4edee3cdbf5\$lut for cells of type $lut.
Using template $paramod$3e2cc268179f6cf76ba3a1ae596032bacd833190\$lut for cells of type $lut.
Using template $paramod$bb3ed824561ec1add9d133e0062570f0118fd3af\$lut for cells of type $lut.
Using template $paramod$10c5d02d255860d98a885025e748122817b8df6d\$lut for cells of type $lut.
Using template $paramod$5bcc914c9b68f464498e5c15dd48fa84aa1ab48e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11101000000101110001011111101000 for cells of type $lut.
Using template $paramod$1fa04026d4b80cf5c4025b3c138ec9ffe13937ed\$lut for cells of type $lut.
Using template $paramod$3a06b5fcadbbfd1564567b0ee40fe54e122063a2\$lut for cells of type $lut.
Using template $paramod$039cd83b37344e64fde67e75917213073300b391\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000100011110 for cells of type $lut.
Using template $paramod$ea650725ba32040a038c895d12a3057630383648\$lut for cells of type $lut.
Using template $paramod$e647ad29e5fee04ec213dcb35fa8bd1e0b8058d7\$lut for cells of type $lut.
Using template $paramod$4e09f5a2e4757e8730bd9a3e9e13173ca5a22b12\$lut for cells of type $lut.
Using template $paramod$717e2aa00fdeea9177682e0da9d91b17790eb577\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000001 for cells of type $lut.
Using template $paramod$907409cf8f120e30a1bedcfaf5daf9186cc38343\$lut for cells of type $lut.
Using template $paramod$4bd0e3f7ccadaeabe70e47157cafef462181b424\$lut for cells of type $lut.
Using template $paramod$b8787bddc111841f73ced6b94fec97961e95ea3b\$lut for cells of type $lut.
Using template $paramod$c1fecfe4c513037bcda4a3b27834f559d5c0061f\$lut for cells of type $lut.
Using template $paramod$a0f1221590514f556bcac22f8ea6cbd38a89e996\$lut for cells of type $lut.
Using template $paramod$424778acf24fe529d84801ea1789a6cdfdad0ff3\$lut for cells of type $lut.
Using template $paramod$472fd27354fce19c95e6799f7ffd2ddd57ca2011\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=735368235 for cells of type $lut.
Using template $paramod$90697aa9dee8936a9301fdbe607110f99c8a6b69\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10001110111010001110100010001110 for cells of type $lut.
Using template $paramod$f1e1cc86c93f1b845763be6dad75047a2ce61d1d\$lut for cells of type $lut.
Using template $paramod$0b36d3e4818cc303da3c7d6108ddd2b82b94b81f\$lut for cells of type $lut.
Using template $paramod$c5a772d709ace6bbf4e34694652e9b4bc8f2fe74\$lut for cells of type $lut.
Using template $paramod$98eda86014cfba5798ee763ee2181f47f21fbc53\$lut for cells of type $lut.
Using template $paramod$5e4a70c9dfc2491354cbd75896361a80c1963536\$lut for cells of type $lut.
Using template $paramod$9685f6ba6bc691bd8b637fd2aad636e35f13a2ce\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=534831135 for cells of type $lut.
Using template $paramod$5171eb14261340404faa9e075ff92728d71b5ef7\$lut for cells of type $lut.
Using template $paramod$28d73da6229abe5cd70903551e2be880dd7de830\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=1611010032 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011100 for cells of type $lut.
Using template $paramod$c8f0d73f19b56fb11fa138209069029ff63c9c3e\$lut for cells of type $lut.
Using template $paramod$a29c0ba52b4d6b5c065170c282962340bc32c912\$lut for cells of type $lut.
Using template $paramod$382f33a27fb12759dc278b5e036a1f34c86a4107\$lut for cells of type $lut.
Using template $paramod$cb21853228db62e11b7504a4202fd6a18e3eee0c\$lut for cells of type $lut.
Using template $paramod$c20ae1a3865efcd924b68f4e6f96ed0bb36ba233\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=733122280 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000101010000 for cells of type $lut.
Using template $paramod$787034bc0061648b364cf62c896e501a06bffd73\$lut for cells of type $lut.
Using template $paramod$0f25348461496625bde963270d78fa0e1ed1578b\$lut for cells of type $lut.
Using template $paramod$d9ada97de34ae252ae79c7b7092810e8c24b5691\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=124791458 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11101000100011100000110011000000 for cells of type $lut.
Using template $paramod$cec0e8ed39f4f64adc33bd49ae02f7071a62ba09\$lut for cells of type $lut.
Using template $paramod$af211f93c04ac8072bb2a462e7dea01c29acbc95\$lut for cells of type $lut.
Using template $paramod$149a44e0f061b93a916dd91581308ade621ba1c6\$lut for cells of type $lut.
Using template $paramod$3010228ba4a42a76347dc2ee3176f2c0319d3472\$lut for cells of type $lut.
Using template $paramod$4ae4dcb6935ce4a2958f091e97903647fb854d0e\$lut for cells of type $lut.
Using template $paramod$0d99b407d20e7e97b7e0a2e71bfe8a47ceba0c85\$lut for cells of type $lut.
Using template $paramod$b5f8693354bf7bccdff9d8b96372499de421799e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100011100 for cells of type $lut.
No more expansions possible.
<suppressed ~6215 debug messages>

2.24. Executing DFFINIT pass (set INIT param on FF cells).
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$556.INIT (port=Q, net=\y3 [10]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$554.INIT (port=Q, net=\y3 [8]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$459.INIT (port=Q, net=\y0 [7]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$458.INIT (port=Q, net=\y0 [6]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$455.INIT (port=Q, net=\y0 [3]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$456.INIT (port=Q, net=\y0 [4]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$611.INIT (port=Q, net=\y5 [3]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$712.INIT (port=Q, net=\ctr [9]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$708.INIT (port=Q, net=\ctr [5]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$499.INIT (port=Q, net=\y1 [16]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$590.INIT (port=Q, net=\y4 [13]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$622.INIT (port=Q, net=\y5 [14]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$623.INIT (port=Q, net=\y5 [15]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$624.INIT (port=Q, net=\y5 [16]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$520.INIT (port=Q, net=\y2 [6]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$467.INIT (port=Q, net=\y0 [15]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$707.INIT (port=Q, net=\ctr [4]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$696.INIT (port=Q, net=\y7 [25]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$703.INIT (port=Q, net=\ctr [0]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$705.INIT (port=Q, net=\ctr [2]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$704.INIT (port=Q, net=\ctr [1]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$706.INIT (port=Q, net=\ctr [3]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$709.INIT (port=Q, net=\ctr [6]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$710.INIT (port=Q, net=\ctr [7]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$711.INIT (port=Q, net=\ctr [8]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$546.INIT (port=Q, net=\y3 [0]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$487.INIT (port=Q, net=\y1 [4]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$651.INIT (port=Q, net=\y6 [11]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$484.INIT (port=Q, net=\y1 [1]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$649.INIT (port=Q, net=\y6 [9]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$650.INIT (port=Q, net=\y6 [10]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$460.INIT (port=Q, net=\y0 [8]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$559.INIT (port=Q, net=\y3 [13]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$453.INIT (port=Q, net=\y0 [1]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$462.INIT (port=Q, net=\y0 [10]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$675.INIT (port=Q, net=\y7 [4]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$557.INIT (port=Q, net=\y3 [11]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$641.INIT (port=Q, net=\y6 [1]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$463.INIT (port=Q, net=\y0 [11]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$521.INIT (port=Q, net=\y2 [7]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$464.INIT (port=Q, net=\y0 [12]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$644.INIT (port=Q, net=\y6 [4]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$526.INIT (port=Q, net=\y2 [12]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$491.INIT (port=Q, net=\y1 [8]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$610.INIT (port=Q, net=\y5 [2]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$683.INIT (port=Q, net=\y7 [12]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$613.INIT (port=Q, net=\y5 [5]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$684.INIT (port=Q, net=\y7 [13]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$615.INIT (port=Q, net=\y5 [7]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$581.INIT (port=Q, net=\y4 [4]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$563.INIT (port=Q, net=\y3 [17]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$617.INIT (port=Q, net=\y5 [9]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$580.INIT (port=Q, net=\y4 [3]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$614.INIT (port=Q, net=\y5 [6]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$582.INIT (port=Q, net=\y4 [5]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$583.INIT (port=Q, net=\y4 [6]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$616.INIT (port=Q, net=\y5 [8]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$547.INIT (port=Q, net=\y3 [1]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$672.INIT (port=Q, net=\y7 [1]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$548.INIT (port=Q, net=\y3 [2]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$549.INIT (port=Q, net=\y3 [3]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$550.INIT (port=Q, net=\y3 [4]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$680.INIT (port=Q, net=\y7 [9]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$671.INIT (port=Q, net=\y7 [0]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$679.INIT (port=Q, net=\y7 [8]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$552.INIT (port=Q, net=\y3 [6]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$457.INIT (port=Q, net=\y0 [5]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$452.INIT (port=Q, net=\y0 [0]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$558.INIT (port=Q, net=\y3 [12]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$585.INIT (port=Q, net=\y4 [8]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$579.INIT (port=Q, net=\y4 [2]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$494.INIT (port=Q, net=\y1 [11]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$642.INIT (port=Q, net=\y6 [2]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$530.INIT (port=Q, net=\y2 [16]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$655.INIT (port=Q, net=\y6 [15]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$647.INIT (port=Q, net=\y6 [7]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$673.INIT (port=Q, net=\y7 [2]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$577.INIT (port=Q, net=\y4 [0]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$486.INIT (port=Q, net=\y1 [3]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$609.INIT (port=Q, net=\y5 [1]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$702.INIT (port=Q, net=\rdy) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$608.INIT (port=Q, net=\y5 [0]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$553.INIT (port=Q, net=\y3 [7]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$555.INIT (port=Q, net=\y3 [9]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$648.INIT (port=Q, net=\y6 [8]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$525.INIT (port=Q, net=\y2 [11]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$591.INIT (port=Q, net=\y4 [14]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$640.INIT (port=Q, net=\y6 [0]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$529.INIT (port=Q, net=\y2 [15]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$528.INIT (port=Q, net=\y2 [14]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$531.INIT (port=Q, net=\y2 [17]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$523.INIT (port=Q, net=\y2 [9]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$527.INIT (port=Q, net=\y2 [13]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$522.INIT (port=Q, net=\y2 [8]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$518.INIT (port=Q, net=\y2 [4]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$517.INIT (port=Q, net=\y2 [3]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$516.INIT (port=Q, net=\y2 [2]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$515.INIT (port=Q, net=\y2 [1]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$514.INIT (port=Q, net=\y2 [0]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$492.INIT (port=Q, net=\y1 [9]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$524.INIT (port=Q, net=\y2 [10]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$495.INIT (port=Q, net=\y1 [12]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$643.INIT (port=Q, net=\y6 [3]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$493.INIT (port=Q, net=\y1 [10]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$657.INIT (port=Q, net=\y6 [17]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$468.INIT (port=Q, net=\y0 [16]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$645.INIT (port=Q, net=\y6 [5]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$646.INIT (port=Q, net=\y6 [6]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$674.INIT (port=Q, net=\y7 [3]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$676.INIT (port=Q, net=\y7 [5]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$677.INIT (port=Q, net=\y7 [6]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$678.INIT (port=Q, net=\y7 [7]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$560.INIT (port=Q, net=\y3 [14]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$682.INIT (port=Q, net=\y7 [11]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$562.INIT (port=Q, net=\y3 [16]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$454.INIT (port=Q, net=\y0 [2]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$578.INIT (port=Q, net=\y4 [1]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$586.INIT (port=Q, net=\y4 [9]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$587.INIT (port=Q, net=\y4 [10]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$618.INIT (port=Q, net=\y5 [10]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$619.INIT (port=Q, net=\y5 [11]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$466.INIT (port=Q, net=\y0 [14]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$498.INIT (port=Q, net=\y1 [15]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$592.INIT (port=Q, net=\y4 [15]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$593.INIT (port=Q, net=\y4 [16]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$594.INIT (port=Q, net=\y4 [17]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$519.INIT (port=Q, net=\y2 [5]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$584.INIT (port=Q, net=\y4 [7]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$588.INIT (port=Q, net=\y4 [11]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$621.INIT (port=Q, net=\y5 [13]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$625.INIT (port=Q, net=\y5 [17]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$620.INIT (port=Q, net=\y5 [12]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$497.INIT (port=Q, net=\y1 [14]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$496.INIT (port=Q, net=\y1 [13]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$589.INIT (port=Q, net=\y4 [12]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$500.INIT (port=Q, net=\y1 [17]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$488.INIT (port=Q, net=\y1 [5]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$490.INIT (port=Q, net=\y1 [7]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$485.INIT (port=Q, net=\y1 [2]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$652.INIT (port=Q, net=\y6 [12]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$653.INIT (port=Q, net=\y6 [13]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$654.INIT (port=Q, net=\y6 [14]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$489.INIT (port=Q, net=\y1 [6]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$656.INIT (port=Q, net=\y6 [16]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$483.INIT (port=Q, net=\y1 [0]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$469.INIT (port=Q, net=\y0 [17]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$551.INIT (port=Q, net=\y3 [5]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$681.INIT (port=Q, net=\y7 [10]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$465.INIT (port=Q, net=\y0 [13]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$685.INIT (port=Q, net=\y7 [14]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$561.INIT (port=Q, net=\y3 [15]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$612.INIT (port=Q, net=\y5 [4]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$461.INIT (port=Q, net=\y0 [9]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$686.INIT (port=Q, net=\y7 [15]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$687.INIT (port=Q, net=\y7 [16]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$688.INIT (port=Q, net=\y7 [17]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$689.INIT (port=Q, net=\y7 [18]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$690.INIT (port=Q, net=\y7 [19]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$691.INIT (port=Q, net=\y7 [20]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$692.INIT (port=Q, net=\y7 [21]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$693.INIT (port=Q, net=\y7 [22]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$694.INIT (port=Q, net=\y7 [23]) to 1'0.
Setting col_idct.$auto$simplemap.cc:420:simplemap_dff$695.INIT (port=Q, net=\y7 [24]) to 1'0.
Removed 0 unused cells and 8126 unused wires.

2.25. Executing HIERARCHY pass (managing design hierarchy).

2.25.1. Analyzing design hierarchy..
Top module:  \col_idct

2.25.2. Analyzing design hierarchy..
Top module:  \col_idct
Removed 0 unused modules.

2.26. Printing statistics.

=== col_idct ===

   Number of wires:               4042
   Number of wire bits:           7994
   Number of public wires:          74
   Number of public wire bits:    2244
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               6604
     FDRE                          163
     LUT1                          348
     LUT2                         1566
     LUT3                          670
     LUT4                           60
     LUT5                           54
     LUT6                         1167
     MUXCY                        1306
     MUXF7                          67
     MUXF8                          23
     XORCY                        1180

   Estimated number of LCs:       2516

2.27. Executing CHECK pass (checking for obvious problems).
checking module col_idct..
found and reported 0 problems.

3. Executing Verilog backend.
Dumping module `\col_idct'.

End of script. Logfile hash: 5251956d56
CPU: user 9.59s system 0.11s, MEM: 181.61 MB total, 176.01 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 21% 2x write_verilog (2 sec), 12% 13x opt_merge (1 sec), ...
